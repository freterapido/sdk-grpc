// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: freterapido.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Freterapido.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FreterapidoRoot

@implementation FreterapidoRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - FreterapidoRoot_FileDescriptor

static GPBFileDescriptor *FreterapidoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"freterapido"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CalcularFreteRequest

@implementation CalcularFreteRequest

@dynamic tipoCobranca;
@dynamic filtro;
@dynamic hasLimite, limite;
@dynamic token;
@dynamic codigoPlataforma;
@dynamic retornarConsolidacao;
@dynamic hasRemetente, remetente;
@dynamic hasExpedidor, expedidor;
@dynamic hasDestinatario, destinatario;
@dynamic volumesArray, volumesArray_Count;

typedef struct CalcularFreteRequest__storage_ {
  uint32_t _has_storage_[1];
  CalcularFreteRequest_TipoCobranca tipoCobranca;
  CalcularFreteRequest_Filtro filtro;
  GPBInt64Value *limite;
  NSString *token;
  NSString *codigoPlataforma;
  RemetenteRequest *remetente;
  ExpedidorRequest *expedidor;
  DestinatarioRequest *destinatario;
  NSMutableArray *volumesArray;
} CalcularFreteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tipoCobranca",
        .dataTypeSpecific.enumDescFunc = CalcularFreteRequest_TipoCobranca_EnumDescriptor,
        .number = CalcularFreteRequest_FieldNumber_TipoCobranca,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CalcularFreteRequest__storage_, tipoCobranca),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "filtro",
        .dataTypeSpecific.enumDescFunc = CalcularFreteRequest_Filtro_EnumDescriptor,
        .number = CalcularFreteRequest_FieldNumber_Filtro,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CalcularFreteRequest__storage_, filtro),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "limite",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBInt64Value),
        .number = CalcularFreteRequest_FieldNumber_Limite,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CalcularFreteRequest__storage_, limite),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = CalcularFreteRequest_FieldNumber_Token,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CalcularFreteRequest__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "codigoPlataforma",
        .dataTypeSpecific.className = NULL,
        .number = CalcularFreteRequest_FieldNumber_CodigoPlataforma,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CalcularFreteRequest__storage_, codigoPlataforma),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retornarConsolidacao",
        .dataTypeSpecific.className = NULL,
        .number = CalcularFreteRequest_FieldNumber_RetornarConsolidacao,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "remetente",
        .dataTypeSpecific.className = GPBStringifySymbol(RemetenteRequest),
        .number = CalcularFreteRequest_FieldNumber_Remetente,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CalcularFreteRequest__storage_, remetente),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expedidor",
        .dataTypeSpecific.className = GPBStringifySymbol(ExpedidorRequest),
        .number = CalcularFreteRequest_FieldNumber_Expedidor,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(CalcularFreteRequest__storage_, expedidor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "destinatario",
        .dataTypeSpecific.className = GPBStringifySymbol(DestinatarioRequest),
        .number = CalcularFreteRequest_FieldNumber_Destinatario,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(CalcularFreteRequest__storage_, destinatario),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "volumesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VolumeRequest),
        .number = CalcularFreteRequest_FieldNumber_VolumesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CalcularFreteRequest__storage_, volumesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CalcularFreteRequest class]
                                     rootClass:[FreterapidoRoot class]
                                          file:FreterapidoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CalcularFreteRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CalcularFreteRequest_TipoCobranca_RawValue(CalcularFreteRequest *message) {
  GPBDescriptor *descriptor = [CalcularFreteRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CalcularFreteRequest_FieldNumber_TipoCobranca];
  return GPBGetMessageInt32Field(message, field);
}

void SetCalcularFreteRequest_TipoCobranca_RawValue(CalcularFreteRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [CalcularFreteRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CalcularFreteRequest_FieldNumber_TipoCobranca];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t CalcularFreteRequest_Filtro_RawValue(CalcularFreteRequest *message) {
  GPBDescriptor *descriptor = [CalcularFreteRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CalcularFreteRequest_FieldNumber_Filtro];
  return GPBGetMessageInt32Field(message, field);
}

void SetCalcularFreteRequest_Filtro_RawValue(CalcularFreteRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [CalcularFreteRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CalcularFreteRequest_FieldNumber_Filtro];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CalcularFreteRequest_TipoCobranca

GPBEnumDescriptor *CalcularFreteRequest_TipoCobranca_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TipocobrancaUnknown\000TipocobrancaCif\000Tipo"
        "cobrancaFob\000";
    static const int32_t values[] = {
        CalcularFreteRequest_TipoCobranca_TipocobrancaUnknown,
        CalcularFreteRequest_TipoCobranca_TipocobrancaCif,
        CalcularFreteRequest_TipoCobranca_TipocobrancaFob,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CalcularFreteRequest_TipoCobranca)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CalcularFreteRequest_TipoCobranca_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CalcularFreteRequest_TipoCobranca_IsValidValue(int32_t value__) {
  switch (value__) {
    case CalcularFreteRequest_TipoCobranca_TipocobrancaUnknown:
    case CalcularFreteRequest_TipoCobranca_TipocobrancaCif:
    case CalcularFreteRequest_TipoCobranca_TipocobrancaFob:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CalcularFreteRequest_Filtro

GPBEnumDescriptor *CalcularFreteRequest_Filtro_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FiltroSemFiltro\000FiltroMenorPreco\000FiltroM"
        "enorPrazo\000";
    static const int32_t values[] = {
        CalcularFreteRequest_Filtro_FiltroSemFiltro,
        CalcularFreteRequest_Filtro_FiltroMenorPreco,
        CalcularFreteRequest_Filtro_FiltroMenorPrazo,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CalcularFreteRequest_Filtro)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CalcularFreteRequest_Filtro_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CalcularFreteRequest_Filtro_IsValidValue(int32_t value__) {
  switch (value__) {
    case CalcularFreteRequest_Filtro_FiltroSemFiltro:
    case CalcularFreteRequest_Filtro_FiltroMenorPreco:
    case CalcularFreteRequest_Filtro_FiltroMenorPrazo:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Endereco

@implementation Endereco

@dynamic cep;

typedef struct Endereco__storage_ {
  uint32_t _has_storage_[1];
  NSString *cep;
} Endereco__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cep",
        .dataTypeSpecific.className = NULL,
        .number = Endereco_FieldNumber_Cep,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Endereco__storage_, cep),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Endereco class]
                                     rootClass:[FreterapidoRoot class]
                                          file:FreterapidoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Endereco__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RemetenteRequest

@implementation RemetenteRequest

@dynamic cnpj;

typedef struct RemetenteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *cnpj;
} RemetenteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cnpj",
        .dataTypeSpecific.className = NULL,
        .number = RemetenteRequest_FieldNumber_Cnpj,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RemetenteRequest__storage_, cnpj),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RemetenteRequest class]
                                     rootClass:[FreterapidoRoot class]
                                          file:FreterapidoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RemetenteRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExpedidorRequest

@implementation ExpedidorRequest

@dynamic hasEndereco, endereco;

typedef struct ExpedidorRequest__storage_ {
  uint32_t _has_storage_[1];
  Endereco *endereco;
} ExpedidorRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "endereco",
        .dataTypeSpecific.className = GPBStringifySymbol(Endereco),
        .number = ExpedidorRequest_FieldNumber_Endereco,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExpedidorRequest__storage_, endereco),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExpedidorRequest class]
                                     rootClass:[FreterapidoRoot class]
                                          file:FreterapidoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExpedidorRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DestinatarioRequest

@implementation DestinatarioRequest

@dynamic tipoPessoa;
@dynamic cnpjCpf;
@dynamic inscricaoEstadual;
@dynamic hasEndereco, endereco;

typedef struct DestinatarioRequest__storage_ {
  uint32_t _has_storage_[1];
  DestinatarioRequest_TipoPessoa tipoPessoa;
  NSString *cnpjCpf;
  NSString *inscricaoEstadual;
  Endereco *endereco;
} DestinatarioRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tipoPessoa",
        .dataTypeSpecific.enumDescFunc = DestinatarioRequest_TipoPessoa_EnumDescriptor,
        .number = DestinatarioRequest_FieldNumber_TipoPessoa,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DestinatarioRequest__storage_, tipoPessoa),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cnpjCpf",
        .dataTypeSpecific.className = NULL,
        .number = DestinatarioRequest_FieldNumber_CnpjCpf,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DestinatarioRequest__storage_, cnpjCpf),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inscricaoEstadual",
        .dataTypeSpecific.className = NULL,
        .number = DestinatarioRequest_FieldNumber_InscricaoEstadual,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DestinatarioRequest__storage_, inscricaoEstadual),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endereco",
        .dataTypeSpecific.className = GPBStringifySymbol(Endereco),
        .number = DestinatarioRequest_FieldNumber_Endereco,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DestinatarioRequest__storage_, endereco),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DestinatarioRequest class]
                                     rootClass:[FreterapidoRoot class]
                                          file:FreterapidoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DestinatarioRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DestinatarioRequest_TipoPessoa_RawValue(DestinatarioRequest *message) {
  GPBDescriptor *descriptor = [DestinatarioRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DestinatarioRequest_FieldNumber_TipoPessoa];
  return GPBGetMessageInt32Field(message, field);
}

void SetDestinatarioRequest_TipoPessoa_RawValue(DestinatarioRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [DestinatarioRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DestinatarioRequest_FieldNumber_TipoPessoa];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DestinatarioRequest_TipoPessoa

GPBEnumDescriptor *DestinatarioRequest_TipoPessoa_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TipopessoaUnknown\000TipopessoaFisica\000Tipop"
        "essoaJuridica\000";
    static const int32_t values[] = {
        DestinatarioRequest_TipoPessoa_TipopessoaUnknown,
        DestinatarioRequest_TipoPessoa_TipopessoaFisica,
        DestinatarioRequest_TipoPessoa_TipopessoaJuridica,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DestinatarioRequest_TipoPessoa)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DestinatarioRequest_TipoPessoa_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DestinatarioRequest_TipoPessoa_IsValidValue(int32_t value__) {
  switch (value__) {
    case DestinatarioRequest_TipoPessoa_TipopessoaUnknown:
    case DestinatarioRequest_TipoPessoa_TipopessoaFisica:
    case DestinatarioRequest_TipoPessoa_TipopessoaJuridica:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - VolumeRequest

@implementation VolumeRequest

@dynamic tipo;
@dynamic hasSku, sku;
@dynamic hasDescricao, descricao;
@dynamic quantidade;
@dynamic altura;
@dynamic largura;
@dynamic comprimento;
@dynamic peso;
@dynamic valor;
@dynamic volumesProduto;
@dynamic consolidar;
@dynamic sobreposto;
@dynamic tombar;

typedef struct VolumeRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t tipo;
  int32_t quantidade;
  int32_t volumesProduto;
  GPBStringValue *sku;
  GPBStringValue *descricao;
  double altura;
  double largura;
  double comprimento;
  double peso;
  double valor;
} VolumeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tipo",
        .dataTypeSpecific.className = NULL,
        .number = VolumeRequest_FieldNumber_Tipo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VolumeRequest__storage_, tipo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sku",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = VolumeRequest_FieldNumber_Sku,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VolumeRequest__storage_, sku),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "descricao",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = VolumeRequest_FieldNumber_Descricao,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VolumeRequest__storage_, descricao),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quantidade",
        .dataTypeSpecific.className = NULL,
        .number = VolumeRequest_FieldNumber_Quantidade,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VolumeRequest__storage_, quantidade),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "altura",
        .dataTypeSpecific.className = NULL,
        .number = VolumeRequest_FieldNumber_Altura,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VolumeRequest__storage_, altura),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "largura",
        .dataTypeSpecific.className = NULL,
        .number = VolumeRequest_FieldNumber_Largura,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VolumeRequest__storage_, largura),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "comprimento",
        .dataTypeSpecific.className = NULL,
        .number = VolumeRequest_FieldNumber_Comprimento,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VolumeRequest__storage_, comprimento),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "peso",
        .dataTypeSpecific.className = NULL,
        .number = VolumeRequest_FieldNumber_Peso,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VolumeRequest__storage_, peso),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "valor",
        .dataTypeSpecific.className = NULL,
        .number = VolumeRequest_FieldNumber_Valor,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VolumeRequest__storage_, valor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "volumesProduto",
        .dataTypeSpecific.className = NULL,
        .number = VolumeRequest_FieldNumber_VolumesProduto,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VolumeRequest__storage_, volumesProduto),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "consolidar",
        .dataTypeSpecific.className = NULL,
        .number = VolumeRequest_FieldNumber_Consolidar,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sobreposto",
        .dataTypeSpecific.className = NULL,
        .number = VolumeRequest_FieldNumber_Sobreposto,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "tombar",
        .dataTypeSpecific.className = NULL,
        .number = VolumeRequest_FieldNumber_Tombar,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VolumeRequest class]
                                     rootClass:[FreterapidoRoot class]
                                          file:FreterapidoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VolumeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CalcularFreteResponse

@implementation CalcularFreteResponse

@dynamic tokenOferta;
@dynamic transportadorasArray, transportadorasArray_Count;
@dynamic volumesArray, volumesArray_Count;

typedef struct CalcularFreteResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenOferta;
  NSMutableArray *transportadorasArray;
  NSMutableArray *volumesArray;
} CalcularFreteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenOferta",
        .dataTypeSpecific.className = NULL,
        .number = CalcularFreteResponse_FieldNumber_TokenOferta,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CalcularFreteResponse__storage_, tokenOferta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transportadorasArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TransportadoraResponse),
        .number = CalcularFreteResponse_FieldNumber_TransportadorasArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CalcularFreteResponse__storage_, transportadorasArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "volumesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VolumeResponse),
        .number = CalcularFreteResponse_FieldNumber_VolumesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CalcularFreteResponse__storage_, volumesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CalcularFreteResponse class]
                                     rootClass:[FreterapidoRoot class]
                                          file:FreterapidoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CalcularFreteResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransportadoraResponse

@implementation TransportadoraResponse

@dynamic oferta;
@dynamic cnpj;
@dynamic logotipo;
@dynamic nome;
@dynamic servico;
@dynamic hasDescricaoServico, descricaoServico;
@dynamic prazoEntrega;
@dynamic hasValidade, validade;
@dynamic custoFrete;
@dynamic precoFrete;

typedef struct TransportadoraResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t prazoEntrega;
  NSString *cnpj;
  NSString *logotipo;
  NSString *nome;
  NSString *servico;
  GPBStringValue *descricaoServico;
  GPBTimestamp *validade;
  int64_t oferta;
  double custoFrete;
  double precoFrete;
} TransportadoraResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "oferta",
        .dataTypeSpecific.className = NULL,
        .number = TransportadoraResponse_FieldNumber_Oferta,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransportadoraResponse__storage_, oferta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cnpj",
        .dataTypeSpecific.className = NULL,
        .number = TransportadoraResponse_FieldNumber_Cnpj,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransportadoraResponse__storage_, cnpj),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logotipo",
        .dataTypeSpecific.className = NULL,
        .number = TransportadoraResponse_FieldNumber_Logotipo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransportadoraResponse__storage_, logotipo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nome",
        .dataTypeSpecific.className = NULL,
        .number = TransportadoraResponse_FieldNumber_Nome,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransportadoraResponse__storage_, nome),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "servico",
        .dataTypeSpecific.className = NULL,
        .number = TransportadoraResponse_FieldNumber_Servico,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TransportadoraResponse__storage_, servico),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "descricaoServico",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = TransportadoraResponse_FieldNumber_DescricaoServico,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TransportadoraResponse__storage_, descricaoServico),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "prazoEntrega",
        .dataTypeSpecific.className = NULL,
        .number = TransportadoraResponse_FieldNumber_PrazoEntrega,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TransportadoraResponse__storage_, prazoEntrega),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "validade",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = TransportadoraResponse_FieldNumber_Validade,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TransportadoraResponse__storage_, validade),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "custoFrete",
        .dataTypeSpecific.className = NULL,
        .number = TransportadoraResponse_FieldNumber_CustoFrete,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TransportadoraResponse__storage_, custoFrete),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "precoFrete",
        .dataTypeSpecific.className = NULL,
        .number = TransportadoraResponse_FieldNumber_PrecoFrete,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TransportadoraResponse__storage_, precoFrete),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransportadoraResponse class]
                                     rootClass:[FreterapidoRoot class]
                                          file:FreterapidoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransportadoraResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VolumeResponse

@implementation VolumeResponse

@dynamic tipo;
@dynamic hasSku, sku;
@dynamic hasDescricao, descricao;
@dynamic quantidade;
@dynamic altura;
@dynamic largura;
@dynamic comprimento;
@dynamic peso;
@dynamic valor;
@dynamic volumesProduto;
@dynamic itemsArray, itemsArray_Count;

typedef struct VolumeResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t tipo;
  int32_t quantidade;
  int32_t volumesProduto;
  GPBStringValue *sku;
  GPBStringValue *descricao;
  NSMutableArray *itemsArray;
  double altura;
  double largura;
  double comprimento;
  double peso;
  double valor;
} VolumeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tipo",
        .dataTypeSpecific.className = NULL,
        .number = VolumeResponse_FieldNumber_Tipo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VolumeResponse__storage_, tipo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sku",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = VolumeResponse_FieldNumber_Sku,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VolumeResponse__storage_, sku),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "descricao",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = VolumeResponse_FieldNumber_Descricao,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VolumeResponse__storage_, descricao),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quantidade",
        .dataTypeSpecific.className = NULL,
        .number = VolumeResponse_FieldNumber_Quantidade,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VolumeResponse__storage_, quantidade),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "altura",
        .dataTypeSpecific.className = NULL,
        .number = VolumeResponse_FieldNumber_Altura,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VolumeResponse__storage_, altura),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "largura",
        .dataTypeSpecific.className = NULL,
        .number = VolumeResponse_FieldNumber_Largura,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VolumeResponse__storage_, largura),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "comprimento",
        .dataTypeSpecific.className = NULL,
        .number = VolumeResponse_FieldNumber_Comprimento,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VolumeResponse__storage_, comprimento),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "peso",
        .dataTypeSpecific.className = NULL,
        .number = VolumeResponse_FieldNumber_Peso,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VolumeResponse__storage_, peso),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "valor",
        .dataTypeSpecific.className = NULL,
        .number = VolumeResponse_FieldNumber_Valor,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VolumeResponse__storage_, valor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "volumesProduto",
        .dataTypeSpecific.className = NULL,
        .number = VolumeResponse_FieldNumber_VolumesProduto,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VolumeResponse__storage_, volumesProduto),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VolumeResponse),
        .number = VolumeResponse_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VolumeResponse__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VolumeResponse class]
                                     rootClass:[FreterapidoRoot class]
                                          file:FreterapidoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VolumeResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
