// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: freterapido.proto

#ifndef PROTOBUF_INCLUDED_freterapido_2eproto
#define PROTOBUF_INCLUDED_freterapido_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_freterapido_2eproto 

namespace protobuf_freterapido_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_freterapido_2eproto
namespace freterapido {
class CalcularFreteRequest;
class CalcularFreteRequestDefaultTypeInternal;
extern CalcularFreteRequestDefaultTypeInternal _CalcularFreteRequest_default_instance_;
class CalcularFreteResponse;
class CalcularFreteResponseDefaultTypeInternal;
extern CalcularFreteResponseDefaultTypeInternal _CalcularFreteResponse_default_instance_;
class DestinatarioRequest;
class DestinatarioRequestDefaultTypeInternal;
extern DestinatarioRequestDefaultTypeInternal _DestinatarioRequest_default_instance_;
class Endereco;
class EnderecoDefaultTypeInternal;
extern EnderecoDefaultTypeInternal _Endereco_default_instance_;
class ExpedidorRequest;
class ExpedidorRequestDefaultTypeInternal;
extern ExpedidorRequestDefaultTypeInternal _ExpedidorRequest_default_instance_;
class RemetenteRequest;
class RemetenteRequestDefaultTypeInternal;
extern RemetenteRequestDefaultTypeInternal _RemetenteRequest_default_instance_;
class TransportadoraResponse;
class TransportadoraResponseDefaultTypeInternal;
extern TransportadoraResponseDefaultTypeInternal _TransportadoraResponse_default_instance_;
class VolumeRequest;
class VolumeRequestDefaultTypeInternal;
extern VolumeRequestDefaultTypeInternal _VolumeRequest_default_instance_;
class VolumeResponse;
class VolumeResponseDefaultTypeInternal;
extern VolumeResponseDefaultTypeInternal _VolumeResponse_default_instance_;
}  // namespace freterapido
namespace google {
namespace protobuf {
template<> ::freterapido::CalcularFreteRequest* Arena::CreateMaybeMessage<::freterapido::CalcularFreteRequest>(Arena*);
template<> ::freterapido::CalcularFreteResponse* Arena::CreateMaybeMessage<::freterapido::CalcularFreteResponse>(Arena*);
template<> ::freterapido::DestinatarioRequest* Arena::CreateMaybeMessage<::freterapido::DestinatarioRequest>(Arena*);
template<> ::freterapido::Endereco* Arena::CreateMaybeMessage<::freterapido::Endereco>(Arena*);
template<> ::freterapido::ExpedidorRequest* Arena::CreateMaybeMessage<::freterapido::ExpedidorRequest>(Arena*);
template<> ::freterapido::RemetenteRequest* Arena::CreateMaybeMessage<::freterapido::RemetenteRequest>(Arena*);
template<> ::freterapido::TransportadoraResponse* Arena::CreateMaybeMessage<::freterapido::TransportadoraResponse>(Arena*);
template<> ::freterapido::VolumeRequest* Arena::CreateMaybeMessage<::freterapido::VolumeRequest>(Arena*);
template<> ::freterapido::VolumeResponse* Arena::CreateMaybeMessage<::freterapido::VolumeResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace freterapido {

enum CalcularFreteRequest_TipoCobranca {
  CalcularFreteRequest_TipoCobranca_TIPOCOBRANCA_UNKNOWN = 0,
  CalcularFreteRequest_TipoCobranca_TIPOCOBRANCA_CIF = 1,
  CalcularFreteRequest_TipoCobranca_TIPOCOBRANCA_FOB = 2,
  CalcularFreteRequest_TipoCobranca_CalcularFreteRequest_TipoCobranca_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CalcularFreteRequest_TipoCobranca_CalcularFreteRequest_TipoCobranca_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CalcularFreteRequest_TipoCobranca_IsValid(int value);
const CalcularFreteRequest_TipoCobranca CalcularFreteRequest_TipoCobranca_TipoCobranca_MIN = CalcularFreteRequest_TipoCobranca_TIPOCOBRANCA_UNKNOWN;
const CalcularFreteRequest_TipoCobranca CalcularFreteRequest_TipoCobranca_TipoCobranca_MAX = CalcularFreteRequest_TipoCobranca_TIPOCOBRANCA_FOB;
const int CalcularFreteRequest_TipoCobranca_TipoCobranca_ARRAYSIZE = CalcularFreteRequest_TipoCobranca_TipoCobranca_MAX + 1;

const ::google::protobuf::EnumDescriptor* CalcularFreteRequest_TipoCobranca_descriptor();
inline const ::std::string& CalcularFreteRequest_TipoCobranca_Name(CalcularFreteRequest_TipoCobranca value) {
  return ::google::protobuf::internal::NameOfEnum(
    CalcularFreteRequest_TipoCobranca_descriptor(), value);
}
inline bool CalcularFreteRequest_TipoCobranca_Parse(
    const ::std::string& name, CalcularFreteRequest_TipoCobranca* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CalcularFreteRequest_TipoCobranca>(
    CalcularFreteRequest_TipoCobranca_descriptor(), name, value);
}
enum CalcularFreteRequest_Filtro {
  CalcularFreteRequest_Filtro_FILTRO_SEM_FILTRO = 0,
  CalcularFreteRequest_Filtro_FILTRO_MENOR_PRECO = 1,
  CalcularFreteRequest_Filtro_FILTRO_MENOR_PRAZO = 2,
  CalcularFreteRequest_Filtro_CalcularFreteRequest_Filtro_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CalcularFreteRequest_Filtro_CalcularFreteRequest_Filtro_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CalcularFreteRequest_Filtro_IsValid(int value);
const CalcularFreteRequest_Filtro CalcularFreteRequest_Filtro_Filtro_MIN = CalcularFreteRequest_Filtro_FILTRO_SEM_FILTRO;
const CalcularFreteRequest_Filtro CalcularFreteRequest_Filtro_Filtro_MAX = CalcularFreteRequest_Filtro_FILTRO_MENOR_PRAZO;
const int CalcularFreteRequest_Filtro_Filtro_ARRAYSIZE = CalcularFreteRequest_Filtro_Filtro_MAX + 1;

const ::google::protobuf::EnumDescriptor* CalcularFreteRequest_Filtro_descriptor();
inline const ::std::string& CalcularFreteRequest_Filtro_Name(CalcularFreteRequest_Filtro value) {
  return ::google::protobuf::internal::NameOfEnum(
    CalcularFreteRequest_Filtro_descriptor(), value);
}
inline bool CalcularFreteRequest_Filtro_Parse(
    const ::std::string& name, CalcularFreteRequest_Filtro* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CalcularFreteRequest_Filtro>(
    CalcularFreteRequest_Filtro_descriptor(), name, value);
}
enum DestinatarioRequest_TipoPessoa {
  DestinatarioRequest_TipoPessoa_TIPOPESSOA_UNKNOWN = 0,
  DestinatarioRequest_TipoPessoa_TIPOPESSOA_FISICA = 1,
  DestinatarioRequest_TipoPessoa_TIPOPESSOA_JURIDICA = 2,
  DestinatarioRequest_TipoPessoa_DestinatarioRequest_TipoPessoa_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DestinatarioRequest_TipoPessoa_DestinatarioRequest_TipoPessoa_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DestinatarioRequest_TipoPessoa_IsValid(int value);
const DestinatarioRequest_TipoPessoa DestinatarioRequest_TipoPessoa_TipoPessoa_MIN = DestinatarioRequest_TipoPessoa_TIPOPESSOA_UNKNOWN;
const DestinatarioRequest_TipoPessoa DestinatarioRequest_TipoPessoa_TipoPessoa_MAX = DestinatarioRequest_TipoPessoa_TIPOPESSOA_JURIDICA;
const int DestinatarioRequest_TipoPessoa_TipoPessoa_ARRAYSIZE = DestinatarioRequest_TipoPessoa_TipoPessoa_MAX + 1;

const ::google::protobuf::EnumDescriptor* DestinatarioRequest_TipoPessoa_descriptor();
inline const ::std::string& DestinatarioRequest_TipoPessoa_Name(DestinatarioRequest_TipoPessoa value) {
  return ::google::protobuf::internal::NameOfEnum(
    DestinatarioRequest_TipoPessoa_descriptor(), value);
}
inline bool DestinatarioRequest_TipoPessoa_Parse(
    const ::std::string& name, DestinatarioRequest_TipoPessoa* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DestinatarioRequest_TipoPessoa>(
    DestinatarioRequest_TipoPessoa_descriptor(), name, value);
}
// ===================================================================

class CalcularFreteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freterapido.CalcularFreteRequest) */ {
 public:
  CalcularFreteRequest();
  virtual ~CalcularFreteRequest();

  CalcularFreteRequest(const CalcularFreteRequest& from);

  inline CalcularFreteRequest& operator=(const CalcularFreteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalcularFreteRequest(CalcularFreteRequest&& from) noexcept
    : CalcularFreteRequest() {
    *this = ::std::move(from);
  }

  inline CalcularFreteRequest& operator=(CalcularFreteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CalcularFreteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalcularFreteRequest* internal_default_instance() {
    return reinterpret_cast<const CalcularFreteRequest*>(
               &_CalcularFreteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CalcularFreteRequest* other);
  friend void swap(CalcularFreteRequest& a, CalcularFreteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalcularFreteRequest* New() const final {
    return CreateMaybeMessage<CalcularFreteRequest>(NULL);
  }

  CalcularFreteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CalcularFreteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CalcularFreteRequest& from);
  void MergeFrom(const CalcularFreteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalcularFreteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CalcularFreteRequest_TipoCobranca TipoCobranca;
  static const TipoCobranca TIPOCOBRANCA_UNKNOWN =
    CalcularFreteRequest_TipoCobranca_TIPOCOBRANCA_UNKNOWN;
  static const TipoCobranca TIPOCOBRANCA_CIF =
    CalcularFreteRequest_TipoCobranca_TIPOCOBRANCA_CIF;
  static const TipoCobranca TIPOCOBRANCA_FOB =
    CalcularFreteRequest_TipoCobranca_TIPOCOBRANCA_FOB;
  static inline bool TipoCobranca_IsValid(int value) {
    return CalcularFreteRequest_TipoCobranca_IsValid(value);
  }
  static const TipoCobranca TipoCobranca_MIN =
    CalcularFreteRequest_TipoCobranca_TipoCobranca_MIN;
  static const TipoCobranca TipoCobranca_MAX =
    CalcularFreteRequest_TipoCobranca_TipoCobranca_MAX;
  static const int TipoCobranca_ARRAYSIZE =
    CalcularFreteRequest_TipoCobranca_TipoCobranca_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TipoCobranca_descriptor() {
    return CalcularFreteRequest_TipoCobranca_descriptor();
  }
  static inline const ::std::string& TipoCobranca_Name(TipoCobranca value) {
    return CalcularFreteRequest_TipoCobranca_Name(value);
  }
  static inline bool TipoCobranca_Parse(const ::std::string& name,
      TipoCobranca* value) {
    return CalcularFreteRequest_TipoCobranca_Parse(name, value);
  }

  typedef CalcularFreteRequest_Filtro Filtro;
  static const Filtro FILTRO_SEM_FILTRO =
    CalcularFreteRequest_Filtro_FILTRO_SEM_FILTRO;
  static const Filtro FILTRO_MENOR_PRECO =
    CalcularFreteRequest_Filtro_FILTRO_MENOR_PRECO;
  static const Filtro FILTRO_MENOR_PRAZO =
    CalcularFreteRequest_Filtro_FILTRO_MENOR_PRAZO;
  static inline bool Filtro_IsValid(int value) {
    return CalcularFreteRequest_Filtro_IsValid(value);
  }
  static const Filtro Filtro_MIN =
    CalcularFreteRequest_Filtro_Filtro_MIN;
  static const Filtro Filtro_MAX =
    CalcularFreteRequest_Filtro_Filtro_MAX;
  static const int Filtro_ARRAYSIZE =
    CalcularFreteRequest_Filtro_Filtro_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Filtro_descriptor() {
    return CalcularFreteRequest_Filtro_descriptor();
  }
  static inline const ::std::string& Filtro_Name(Filtro value) {
    return CalcularFreteRequest_Filtro_Name(value);
  }
  static inline bool Filtro_Parse(const ::std::string& name,
      Filtro* value) {
    return CalcularFreteRequest_Filtro_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .freterapido.VolumeRequest volumes = 10;
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 10;
  ::freterapido::VolumeRequest* mutable_volumes(int index);
  ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeRequest >*
      mutable_volumes();
  const ::freterapido::VolumeRequest& volumes(int index) const;
  ::freterapido::VolumeRequest* add_volumes();
  const ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeRequest >&
      volumes() const;

  // string token = 4;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string codigo_plataforma = 5;
  void clear_codigo_plataforma();
  static const int kCodigoPlataformaFieldNumber = 5;
  const ::std::string& codigo_plataforma() const;
  void set_codigo_plataforma(const ::std::string& value);
  #if LANG_CXX11
  void set_codigo_plataforma(::std::string&& value);
  #endif
  void set_codigo_plataforma(const char* value);
  void set_codigo_plataforma(const char* value, size_t size);
  ::std::string* mutable_codigo_plataforma();
  ::std::string* release_codigo_plataforma();
  void set_allocated_codigo_plataforma(::std::string* codigo_plataforma);

  // .google.protobuf.Int64Value limite = 3;
  bool has_limite() const;
  void clear_limite();
  static const int kLimiteFieldNumber = 3;
  private:
  const ::google::protobuf::Int64Value& _internal_limite() const;
  public:
  const ::google::protobuf::Int64Value& limite() const;
  ::google::protobuf::Int64Value* release_limite();
  ::google::protobuf::Int64Value* mutable_limite();
  void set_allocated_limite(::google::protobuf::Int64Value* limite);

  // .freterapido.RemetenteRequest remetente = 7;
  bool has_remetente() const;
  void clear_remetente();
  static const int kRemetenteFieldNumber = 7;
  private:
  const ::freterapido::RemetenteRequest& _internal_remetente() const;
  public:
  const ::freterapido::RemetenteRequest& remetente() const;
  ::freterapido::RemetenteRequest* release_remetente();
  ::freterapido::RemetenteRequest* mutable_remetente();
  void set_allocated_remetente(::freterapido::RemetenteRequest* remetente);

  // .freterapido.ExpedidorRequest expedidor = 8;
  bool has_expedidor() const;
  void clear_expedidor();
  static const int kExpedidorFieldNumber = 8;
  private:
  const ::freterapido::ExpedidorRequest& _internal_expedidor() const;
  public:
  const ::freterapido::ExpedidorRequest& expedidor() const;
  ::freterapido::ExpedidorRequest* release_expedidor();
  ::freterapido::ExpedidorRequest* mutable_expedidor();
  void set_allocated_expedidor(::freterapido::ExpedidorRequest* expedidor);

  // .freterapido.DestinatarioRequest destinatario = 9;
  bool has_destinatario() const;
  void clear_destinatario();
  static const int kDestinatarioFieldNumber = 9;
  private:
  const ::freterapido::DestinatarioRequest& _internal_destinatario() const;
  public:
  const ::freterapido::DestinatarioRequest& destinatario() const;
  ::freterapido::DestinatarioRequest* release_destinatario();
  ::freterapido::DestinatarioRequest* mutable_destinatario();
  void set_allocated_destinatario(::freterapido::DestinatarioRequest* destinatario);

  // .freterapido.CalcularFreteRequest.TipoCobranca tipo_cobranca = 1;
  void clear_tipo_cobranca();
  static const int kTipoCobrancaFieldNumber = 1;
  ::freterapido::CalcularFreteRequest_TipoCobranca tipo_cobranca() const;
  void set_tipo_cobranca(::freterapido::CalcularFreteRequest_TipoCobranca value);

  // .freterapido.CalcularFreteRequest.Filtro filtro = 2;
  void clear_filtro();
  static const int kFiltroFieldNumber = 2;
  ::freterapido::CalcularFreteRequest_Filtro filtro() const;
  void set_filtro(::freterapido::CalcularFreteRequest_Filtro value);

  // bool retornar_consolidacao = 6;
  void clear_retornar_consolidacao();
  static const int kRetornarConsolidacaoFieldNumber = 6;
  bool retornar_consolidacao() const;
  void set_retornar_consolidacao(bool value);

  // @@protoc_insertion_point(class_scope:freterapido.CalcularFreteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeRequest > volumes_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr codigo_plataforma_;
  ::google::protobuf::Int64Value* limite_;
  ::freterapido::RemetenteRequest* remetente_;
  ::freterapido::ExpedidorRequest* expedidor_;
  ::freterapido::DestinatarioRequest* destinatario_;
  int tipo_cobranca_;
  int filtro_;
  bool retornar_consolidacao_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_freterapido_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Endereco : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freterapido.Endereco) */ {
 public:
  Endereco();
  virtual ~Endereco();

  Endereco(const Endereco& from);

  inline Endereco& operator=(const Endereco& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Endereco(Endereco&& from) noexcept
    : Endereco() {
    *this = ::std::move(from);
  }

  inline Endereco& operator=(Endereco&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Endereco& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Endereco* internal_default_instance() {
    return reinterpret_cast<const Endereco*>(
               &_Endereco_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Endereco* other);
  friend void swap(Endereco& a, Endereco& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Endereco* New() const final {
    return CreateMaybeMessage<Endereco>(NULL);
  }

  Endereco* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Endereco>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Endereco& from);
  void MergeFrom(const Endereco& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Endereco* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cep = 1;
  void clear_cep();
  static const int kCepFieldNumber = 1;
  const ::std::string& cep() const;
  void set_cep(const ::std::string& value);
  #if LANG_CXX11
  void set_cep(::std::string&& value);
  #endif
  void set_cep(const char* value);
  void set_cep(const char* value, size_t size);
  ::std::string* mutable_cep();
  ::std::string* release_cep();
  void set_allocated_cep(::std::string* cep);

  // @@protoc_insertion_point(class_scope:freterapido.Endereco)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cep_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_freterapido_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemetenteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freterapido.RemetenteRequest) */ {
 public:
  RemetenteRequest();
  virtual ~RemetenteRequest();

  RemetenteRequest(const RemetenteRequest& from);

  inline RemetenteRequest& operator=(const RemetenteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemetenteRequest(RemetenteRequest&& from) noexcept
    : RemetenteRequest() {
    *this = ::std::move(from);
  }

  inline RemetenteRequest& operator=(RemetenteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemetenteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemetenteRequest* internal_default_instance() {
    return reinterpret_cast<const RemetenteRequest*>(
               &_RemetenteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RemetenteRequest* other);
  friend void swap(RemetenteRequest& a, RemetenteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemetenteRequest* New() const final {
    return CreateMaybeMessage<RemetenteRequest>(NULL);
  }

  RemetenteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemetenteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemetenteRequest& from);
  void MergeFrom(const RemetenteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemetenteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cnpj = 1;
  void clear_cnpj();
  static const int kCnpjFieldNumber = 1;
  const ::std::string& cnpj() const;
  void set_cnpj(const ::std::string& value);
  #if LANG_CXX11
  void set_cnpj(::std::string&& value);
  #endif
  void set_cnpj(const char* value);
  void set_cnpj(const char* value, size_t size);
  ::std::string* mutable_cnpj();
  ::std::string* release_cnpj();
  void set_allocated_cnpj(::std::string* cnpj);

  // @@protoc_insertion_point(class_scope:freterapido.RemetenteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cnpj_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_freterapido_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExpedidorRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freterapido.ExpedidorRequest) */ {
 public:
  ExpedidorRequest();
  virtual ~ExpedidorRequest();

  ExpedidorRequest(const ExpedidorRequest& from);

  inline ExpedidorRequest& operator=(const ExpedidorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExpedidorRequest(ExpedidorRequest&& from) noexcept
    : ExpedidorRequest() {
    *this = ::std::move(from);
  }

  inline ExpedidorRequest& operator=(ExpedidorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpedidorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpedidorRequest* internal_default_instance() {
    return reinterpret_cast<const ExpedidorRequest*>(
               &_ExpedidorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ExpedidorRequest* other);
  friend void swap(ExpedidorRequest& a, ExpedidorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExpedidorRequest* New() const final {
    return CreateMaybeMessage<ExpedidorRequest>(NULL);
  }

  ExpedidorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExpedidorRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExpedidorRequest& from);
  void MergeFrom(const ExpedidorRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpedidorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .freterapido.Endereco endereco = 1;
  bool has_endereco() const;
  void clear_endereco();
  static const int kEnderecoFieldNumber = 1;
  private:
  const ::freterapido::Endereco& _internal_endereco() const;
  public:
  const ::freterapido::Endereco& endereco() const;
  ::freterapido::Endereco* release_endereco();
  ::freterapido::Endereco* mutable_endereco();
  void set_allocated_endereco(::freterapido::Endereco* endereco);

  // @@protoc_insertion_point(class_scope:freterapido.ExpedidorRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::freterapido::Endereco* endereco_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_freterapido_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DestinatarioRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freterapido.DestinatarioRequest) */ {
 public:
  DestinatarioRequest();
  virtual ~DestinatarioRequest();

  DestinatarioRequest(const DestinatarioRequest& from);

  inline DestinatarioRequest& operator=(const DestinatarioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DestinatarioRequest(DestinatarioRequest&& from) noexcept
    : DestinatarioRequest() {
    *this = ::std::move(from);
  }

  inline DestinatarioRequest& operator=(DestinatarioRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DestinatarioRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestinatarioRequest* internal_default_instance() {
    return reinterpret_cast<const DestinatarioRequest*>(
               &_DestinatarioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DestinatarioRequest* other);
  friend void swap(DestinatarioRequest& a, DestinatarioRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DestinatarioRequest* New() const final {
    return CreateMaybeMessage<DestinatarioRequest>(NULL);
  }

  DestinatarioRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DestinatarioRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DestinatarioRequest& from);
  void MergeFrom(const DestinatarioRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestinatarioRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DestinatarioRequest_TipoPessoa TipoPessoa;
  static const TipoPessoa TIPOPESSOA_UNKNOWN =
    DestinatarioRequest_TipoPessoa_TIPOPESSOA_UNKNOWN;
  static const TipoPessoa TIPOPESSOA_FISICA =
    DestinatarioRequest_TipoPessoa_TIPOPESSOA_FISICA;
  static const TipoPessoa TIPOPESSOA_JURIDICA =
    DestinatarioRequest_TipoPessoa_TIPOPESSOA_JURIDICA;
  static inline bool TipoPessoa_IsValid(int value) {
    return DestinatarioRequest_TipoPessoa_IsValid(value);
  }
  static const TipoPessoa TipoPessoa_MIN =
    DestinatarioRequest_TipoPessoa_TipoPessoa_MIN;
  static const TipoPessoa TipoPessoa_MAX =
    DestinatarioRequest_TipoPessoa_TipoPessoa_MAX;
  static const int TipoPessoa_ARRAYSIZE =
    DestinatarioRequest_TipoPessoa_TipoPessoa_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TipoPessoa_descriptor() {
    return DestinatarioRequest_TipoPessoa_descriptor();
  }
  static inline const ::std::string& TipoPessoa_Name(TipoPessoa value) {
    return DestinatarioRequest_TipoPessoa_Name(value);
  }
  static inline bool TipoPessoa_Parse(const ::std::string& name,
      TipoPessoa* value) {
    return DestinatarioRequest_TipoPessoa_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string cnpj_cpf = 2;
  void clear_cnpj_cpf();
  static const int kCnpjCpfFieldNumber = 2;
  const ::std::string& cnpj_cpf() const;
  void set_cnpj_cpf(const ::std::string& value);
  #if LANG_CXX11
  void set_cnpj_cpf(::std::string&& value);
  #endif
  void set_cnpj_cpf(const char* value);
  void set_cnpj_cpf(const char* value, size_t size);
  ::std::string* mutable_cnpj_cpf();
  ::std::string* release_cnpj_cpf();
  void set_allocated_cnpj_cpf(::std::string* cnpj_cpf);

  // string inscricao_estadual = 3;
  void clear_inscricao_estadual();
  static const int kInscricaoEstadualFieldNumber = 3;
  const ::std::string& inscricao_estadual() const;
  void set_inscricao_estadual(const ::std::string& value);
  #if LANG_CXX11
  void set_inscricao_estadual(::std::string&& value);
  #endif
  void set_inscricao_estadual(const char* value);
  void set_inscricao_estadual(const char* value, size_t size);
  ::std::string* mutable_inscricao_estadual();
  ::std::string* release_inscricao_estadual();
  void set_allocated_inscricao_estadual(::std::string* inscricao_estadual);

  // .freterapido.Endereco endereco = 4;
  bool has_endereco() const;
  void clear_endereco();
  static const int kEnderecoFieldNumber = 4;
  private:
  const ::freterapido::Endereco& _internal_endereco() const;
  public:
  const ::freterapido::Endereco& endereco() const;
  ::freterapido::Endereco* release_endereco();
  ::freterapido::Endereco* mutable_endereco();
  void set_allocated_endereco(::freterapido::Endereco* endereco);

  // .freterapido.DestinatarioRequest.TipoPessoa tipo_pessoa = 1;
  void clear_tipo_pessoa();
  static const int kTipoPessoaFieldNumber = 1;
  ::freterapido::DestinatarioRequest_TipoPessoa tipo_pessoa() const;
  void set_tipo_pessoa(::freterapido::DestinatarioRequest_TipoPessoa value);

  // @@protoc_insertion_point(class_scope:freterapido.DestinatarioRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cnpj_cpf_;
  ::google::protobuf::internal::ArenaStringPtr inscricao_estadual_;
  ::freterapido::Endereco* endereco_;
  int tipo_pessoa_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_freterapido_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VolumeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freterapido.VolumeRequest) */ {
 public:
  VolumeRequest();
  virtual ~VolumeRequest();

  VolumeRequest(const VolumeRequest& from);

  inline VolumeRequest& operator=(const VolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VolumeRequest(VolumeRequest&& from) noexcept
    : VolumeRequest() {
    *this = ::std::move(from);
  }

  inline VolumeRequest& operator=(VolumeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VolumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VolumeRequest* internal_default_instance() {
    return reinterpret_cast<const VolumeRequest*>(
               &_VolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(VolumeRequest* other);
  friend void swap(VolumeRequest& a, VolumeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VolumeRequest* New() const final {
    return CreateMaybeMessage<VolumeRequest>(NULL);
  }

  VolumeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VolumeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VolumeRequest& from);
  void MergeFrom(const VolumeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.StringValue sku = 2;
  bool has_sku() const;
  void clear_sku();
  static const int kSkuFieldNumber = 2;
  private:
  const ::google::protobuf::StringValue& _internal_sku() const;
  public:
  const ::google::protobuf::StringValue& sku() const;
  ::google::protobuf::StringValue* release_sku();
  ::google::protobuf::StringValue* mutable_sku();
  void set_allocated_sku(::google::protobuf::StringValue* sku);

  // .google.protobuf.StringValue descricao = 3;
  bool has_descricao() const;
  void clear_descricao();
  static const int kDescricaoFieldNumber = 3;
  private:
  const ::google::protobuf::StringValue& _internal_descricao() const;
  public:
  const ::google::protobuf::StringValue& descricao() const;
  ::google::protobuf::StringValue* release_descricao();
  ::google::protobuf::StringValue* mutable_descricao();
  void set_allocated_descricao(::google::protobuf::StringValue* descricao);

  // int32 tipo = 1;
  void clear_tipo();
  static const int kTipoFieldNumber = 1;
  ::google::protobuf::int32 tipo() const;
  void set_tipo(::google::protobuf::int32 value);

  // int32 quantidade = 4;
  void clear_quantidade();
  static const int kQuantidadeFieldNumber = 4;
  ::google::protobuf::int32 quantidade() const;
  void set_quantidade(::google::protobuf::int32 value);

  // double altura = 5;
  void clear_altura();
  static const int kAlturaFieldNumber = 5;
  double altura() const;
  void set_altura(double value);

  // double largura = 6;
  void clear_largura();
  static const int kLarguraFieldNumber = 6;
  double largura() const;
  void set_largura(double value);

  // double comprimento = 7;
  void clear_comprimento();
  static const int kComprimentoFieldNumber = 7;
  double comprimento() const;
  void set_comprimento(double value);

  // double peso = 8;
  void clear_peso();
  static const int kPesoFieldNumber = 8;
  double peso() const;
  void set_peso(double value);

  // double valor = 9;
  void clear_valor();
  static const int kValorFieldNumber = 9;
  double valor() const;
  void set_valor(double value);

  // int32 volumes_produto = 10;
  void clear_volumes_produto();
  static const int kVolumesProdutoFieldNumber = 10;
  ::google::protobuf::int32 volumes_produto() const;
  void set_volumes_produto(::google::protobuf::int32 value);

  // bool consolidar = 11;
  void clear_consolidar();
  static const int kConsolidarFieldNumber = 11;
  bool consolidar() const;
  void set_consolidar(bool value);

  // bool sobreposto = 12;
  void clear_sobreposto();
  static const int kSobrepostoFieldNumber = 12;
  bool sobreposto() const;
  void set_sobreposto(bool value);

  // bool tombar = 13;
  void clear_tombar();
  static const int kTombarFieldNumber = 13;
  bool tombar() const;
  void set_tombar(bool value);

  // @@protoc_insertion_point(class_scope:freterapido.VolumeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::StringValue* sku_;
  ::google::protobuf::StringValue* descricao_;
  ::google::protobuf::int32 tipo_;
  ::google::protobuf::int32 quantidade_;
  double altura_;
  double largura_;
  double comprimento_;
  double peso_;
  double valor_;
  ::google::protobuf::int32 volumes_produto_;
  bool consolidar_;
  bool sobreposto_;
  bool tombar_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_freterapido_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CalcularFreteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freterapido.CalcularFreteResponse) */ {
 public:
  CalcularFreteResponse();
  virtual ~CalcularFreteResponse();

  CalcularFreteResponse(const CalcularFreteResponse& from);

  inline CalcularFreteResponse& operator=(const CalcularFreteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalcularFreteResponse(CalcularFreteResponse&& from) noexcept
    : CalcularFreteResponse() {
    *this = ::std::move(from);
  }

  inline CalcularFreteResponse& operator=(CalcularFreteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CalcularFreteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalcularFreteResponse* internal_default_instance() {
    return reinterpret_cast<const CalcularFreteResponse*>(
               &_CalcularFreteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CalcularFreteResponse* other);
  friend void swap(CalcularFreteResponse& a, CalcularFreteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalcularFreteResponse* New() const final {
    return CreateMaybeMessage<CalcularFreteResponse>(NULL);
  }

  CalcularFreteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CalcularFreteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CalcularFreteResponse& from);
  void MergeFrom(const CalcularFreteResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalcularFreteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .freterapido.TransportadoraResponse transportadoras = 2;
  int transportadoras_size() const;
  void clear_transportadoras();
  static const int kTransportadorasFieldNumber = 2;
  ::freterapido::TransportadoraResponse* mutable_transportadoras(int index);
  ::google::protobuf::RepeatedPtrField< ::freterapido::TransportadoraResponse >*
      mutable_transportadoras();
  const ::freterapido::TransportadoraResponse& transportadoras(int index) const;
  ::freterapido::TransportadoraResponse* add_transportadoras();
  const ::google::protobuf::RepeatedPtrField< ::freterapido::TransportadoraResponse >&
      transportadoras() const;

  // repeated .freterapido.VolumeResponse volumes = 3;
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 3;
  ::freterapido::VolumeResponse* mutable_volumes(int index);
  ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeResponse >*
      mutable_volumes();
  const ::freterapido::VolumeResponse& volumes(int index) const;
  ::freterapido::VolumeResponse* add_volumes();
  const ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeResponse >&
      volumes() const;

  // string token_oferta = 1;
  void clear_token_oferta();
  static const int kTokenOfertaFieldNumber = 1;
  const ::std::string& token_oferta() const;
  void set_token_oferta(const ::std::string& value);
  #if LANG_CXX11
  void set_token_oferta(::std::string&& value);
  #endif
  void set_token_oferta(const char* value);
  void set_token_oferta(const char* value, size_t size);
  ::std::string* mutable_token_oferta();
  ::std::string* release_token_oferta();
  void set_allocated_token_oferta(::std::string* token_oferta);

  // @@protoc_insertion_point(class_scope:freterapido.CalcularFreteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::freterapido::TransportadoraResponse > transportadoras_;
  ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeResponse > volumes_;
  ::google::protobuf::internal::ArenaStringPtr token_oferta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_freterapido_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransportadoraResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freterapido.TransportadoraResponse) */ {
 public:
  TransportadoraResponse();
  virtual ~TransportadoraResponse();

  TransportadoraResponse(const TransportadoraResponse& from);

  inline TransportadoraResponse& operator=(const TransportadoraResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransportadoraResponse(TransportadoraResponse&& from) noexcept
    : TransportadoraResponse() {
    *this = ::std::move(from);
  }

  inline TransportadoraResponse& operator=(TransportadoraResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransportadoraResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransportadoraResponse* internal_default_instance() {
    return reinterpret_cast<const TransportadoraResponse*>(
               &_TransportadoraResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TransportadoraResponse* other);
  friend void swap(TransportadoraResponse& a, TransportadoraResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransportadoraResponse* New() const final {
    return CreateMaybeMessage<TransportadoraResponse>(NULL);
  }

  TransportadoraResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransportadoraResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransportadoraResponse& from);
  void MergeFrom(const TransportadoraResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportadoraResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cnpj = 2;
  void clear_cnpj();
  static const int kCnpjFieldNumber = 2;
  const ::std::string& cnpj() const;
  void set_cnpj(const ::std::string& value);
  #if LANG_CXX11
  void set_cnpj(::std::string&& value);
  #endif
  void set_cnpj(const char* value);
  void set_cnpj(const char* value, size_t size);
  ::std::string* mutable_cnpj();
  ::std::string* release_cnpj();
  void set_allocated_cnpj(::std::string* cnpj);

  // string logotipo = 3;
  void clear_logotipo();
  static const int kLogotipoFieldNumber = 3;
  const ::std::string& logotipo() const;
  void set_logotipo(const ::std::string& value);
  #if LANG_CXX11
  void set_logotipo(::std::string&& value);
  #endif
  void set_logotipo(const char* value);
  void set_logotipo(const char* value, size_t size);
  ::std::string* mutable_logotipo();
  ::std::string* release_logotipo();
  void set_allocated_logotipo(::std::string* logotipo);

  // string nome = 4;
  void clear_nome();
  static const int kNomeFieldNumber = 4;
  const ::std::string& nome() const;
  void set_nome(const ::std::string& value);
  #if LANG_CXX11
  void set_nome(::std::string&& value);
  #endif
  void set_nome(const char* value);
  void set_nome(const char* value, size_t size);
  ::std::string* mutable_nome();
  ::std::string* release_nome();
  void set_allocated_nome(::std::string* nome);

  // string servico = 5;
  void clear_servico();
  static const int kServicoFieldNumber = 5;
  const ::std::string& servico() const;
  void set_servico(const ::std::string& value);
  #if LANG_CXX11
  void set_servico(::std::string&& value);
  #endif
  void set_servico(const char* value);
  void set_servico(const char* value, size_t size);
  ::std::string* mutable_servico();
  ::std::string* release_servico();
  void set_allocated_servico(::std::string* servico);

  // .google.protobuf.StringValue descricao_servico = 6;
  bool has_descricao_servico() const;
  void clear_descricao_servico();
  static const int kDescricaoServicoFieldNumber = 6;
  private:
  const ::google::protobuf::StringValue& _internal_descricao_servico() const;
  public:
  const ::google::protobuf::StringValue& descricao_servico() const;
  ::google::protobuf::StringValue* release_descricao_servico();
  ::google::protobuf::StringValue* mutable_descricao_servico();
  void set_allocated_descricao_servico(::google::protobuf::StringValue* descricao_servico);

  // .google.protobuf.Timestamp validade = 8;
  bool has_validade() const;
  void clear_validade();
  static const int kValidadeFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_validade() const;
  public:
  const ::google::protobuf::Timestamp& validade() const;
  ::google::protobuf::Timestamp* release_validade();
  ::google::protobuf::Timestamp* mutable_validade();
  void set_allocated_validade(::google::protobuf::Timestamp* validade);

  // int64 oferta = 1;
  void clear_oferta();
  static const int kOfertaFieldNumber = 1;
  ::google::protobuf::int64 oferta() const;
  void set_oferta(::google::protobuf::int64 value);

  // double custo_frete = 9;
  void clear_custo_frete();
  static const int kCustoFreteFieldNumber = 9;
  double custo_frete() const;
  void set_custo_frete(double value);

  // double preco_frete = 10;
  void clear_preco_frete();
  static const int kPrecoFreteFieldNumber = 10;
  double preco_frete() const;
  void set_preco_frete(double value);

  // int32 prazo_entrega = 7;
  void clear_prazo_entrega();
  static const int kPrazoEntregaFieldNumber = 7;
  ::google::protobuf::int32 prazo_entrega() const;
  void set_prazo_entrega(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:freterapido.TransportadoraResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cnpj_;
  ::google::protobuf::internal::ArenaStringPtr logotipo_;
  ::google::protobuf::internal::ArenaStringPtr nome_;
  ::google::protobuf::internal::ArenaStringPtr servico_;
  ::google::protobuf::StringValue* descricao_servico_;
  ::google::protobuf::Timestamp* validade_;
  ::google::protobuf::int64 oferta_;
  double custo_frete_;
  double preco_frete_;
  ::google::protobuf::int32 prazo_entrega_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_freterapido_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VolumeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freterapido.VolumeResponse) */ {
 public:
  VolumeResponse();
  virtual ~VolumeResponse();

  VolumeResponse(const VolumeResponse& from);

  inline VolumeResponse& operator=(const VolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VolumeResponse(VolumeResponse&& from) noexcept
    : VolumeResponse() {
    *this = ::std::move(from);
  }

  inline VolumeResponse& operator=(VolumeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VolumeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VolumeResponse* internal_default_instance() {
    return reinterpret_cast<const VolumeResponse*>(
               &_VolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(VolumeResponse* other);
  friend void swap(VolumeResponse& a, VolumeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VolumeResponse* New() const final {
    return CreateMaybeMessage<VolumeResponse>(NULL);
  }

  VolumeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VolumeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VolumeResponse& from);
  void MergeFrom(const VolumeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .freterapido.VolumeResponse items = 11;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 11;
  ::freterapido::VolumeResponse* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeResponse >*
      mutable_items();
  const ::freterapido::VolumeResponse& items(int index) const;
  ::freterapido::VolumeResponse* add_items();
  const ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeResponse >&
      items() const;

  // .google.protobuf.StringValue sku = 2;
  bool has_sku() const;
  void clear_sku();
  static const int kSkuFieldNumber = 2;
  private:
  const ::google::protobuf::StringValue& _internal_sku() const;
  public:
  const ::google::protobuf::StringValue& sku() const;
  ::google::protobuf::StringValue* release_sku();
  ::google::protobuf::StringValue* mutable_sku();
  void set_allocated_sku(::google::protobuf::StringValue* sku);

  // .google.protobuf.StringValue descricao = 3;
  bool has_descricao() const;
  void clear_descricao();
  static const int kDescricaoFieldNumber = 3;
  private:
  const ::google::protobuf::StringValue& _internal_descricao() const;
  public:
  const ::google::protobuf::StringValue& descricao() const;
  ::google::protobuf::StringValue* release_descricao();
  ::google::protobuf::StringValue* mutable_descricao();
  void set_allocated_descricao(::google::protobuf::StringValue* descricao);

  // int32 tipo = 1;
  void clear_tipo();
  static const int kTipoFieldNumber = 1;
  ::google::protobuf::int32 tipo() const;
  void set_tipo(::google::protobuf::int32 value);

  // int32 quantidade = 4;
  void clear_quantidade();
  static const int kQuantidadeFieldNumber = 4;
  ::google::protobuf::int32 quantidade() const;
  void set_quantidade(::google::protobuf::int32 value);

  // double altura = 5;
  void clear_altura();
  static const int kAlturaFieldNumber = 5;
  double altura() const;
  void set_altura(double value);

  // double largura = 6;
  void clear_largura();
  static const int kLarguraFieldNumber = 6;
  double largura() const;
  void set_largura(double value);

  // double comprimento = 7;
  void clear_comprimento();
  static const int kComprimentoFieldNumber = 7;
  double comprimento() const;
  void set_comprimento(double value);

  // double peso = 8;
  void clear_peso();
  static const int kPesoFieldNumber = 8;
  double peso() const;
  void set_peso(double value);

  // double valor = 9;
  void clear_valor();
  static const int kValorFieldNumber = 9;
  double valor() const;
  void set_valor(double value);

  // int32 volumes_produto = 10;
  void clear_volumes_produto();
  static const int kVolumesProdutoFieldNumber = 10;
  ::google::protobuf::int32 volumes_produto() const;
  void set_volumes_produto(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:freterapido.VolumeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeResponse > items_;
  ::google::protobuf::StringValue* sku_;
  ::google::protobuf::StringValue* descricao_;
  ::google::protobuf::int32 tipo_;
  ::google::protobuf::int32 quantidade_;
  double altura_;
  double largura_;
  double comprimento_;
  double peso_;
  double valor_;
  ::google::protobuf::int32 volumes_produto_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_freterapido_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CalcularFreteRequest

// .freterapido.CalcularFreteRequest.TipoCobranca tipo_cobranca = 1;
inline void CalcularFreteRequest::clear_tipo_cobranca() {
  tipo_cobranca_ = 0;
}
inline ::freterapido::CalcularFreteRequest_TipoCobranca CalcularFreteRequest::tipo_cobranca() const {
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteRequest.tipo_cobranca)
  return static_cast< ::freterapido::CalcularFreteRequest_TipoCobranca >(tipo_cobranca_);
}
inline void CalcularFreteRequest::set_tipo_cobranca(::freterapido::CalcularFreteRequest_TipoCobranca value) {
  
  tipo_cobranca_ = value;
  // @@protoc_insertion_point(field_set:freterapido.CalcularFreteRequest.tipo_cobranca)
}

// .freterapido.CalcularFreteRequest.Filtro filtro = 2;
inline void CalcularFreteRequest::clear_filtro() {
  filtro_ = 0;
}
inline ::freterapido::CalcularFreteRequest_Filtro CalcularFreteRequest::filtro() const {
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteRequest.filtro)
  return static_cast< ::freterapido::CalcularFreteRequest_Filtro >(filtro_);
}
inline void CalcularFreteRequest::set_filtro(::freterapido::CalcularFreteRequest_Filtro value) {
  
  filtro_ = value;
  // @@protoc_insertion_point(field_set:freterapido.CalcularFreteRequest.filtro)
}

// .google.protobuf.Int64Value limite = 3;
inline bool CalcularFreteRequest::has_limite() const {
  return this != internal_default_instance() && limite_ != NULL;
}
inline const ::google::protobuf::Int64Value& CalcularFreteRequest::_internal_limite() const {
  return *limite_;
}
inline const ::google::protobuf::Int64Value& CalcularFreteRequest::limite() const {
  const ::google::protobuf::Int64Value* p = limite_;
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteRequest.limite)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Int64Value*>(
      &::google::protobuf::_Int64Value_default_instance_);
}
inline ::google::protobuf::Int64Value* CalcularFreteRequest::release_limite() {
  // @@protoc_insertion_point(field_release:freterapido.CalcularFreteRequest.limite)
  
  ::google::protobuf::Int64Value* temp = limite_;
  limite_ = NULL;
  return temp;
}
inline ::google::protobuf::Int64Value* CalcularFreteRequest::mutable_limite() {
  
  if (limite_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArenaNoVirtual());
    limite_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.CalcularFreteRequest.limite)
  return limite_;
}
inline void CalcularFreteRequest::set_allocated_limite(::google::protobuf::Int64Value* limite) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(limite_);
  }
  if (limite) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(limite)->GetArena();
    if (message_arena != submessage_arena) {
      limite = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limite, submessage_arena);
    }
    
  } else {
    
  }
  limite_ = limite;
  // @@protoc_insertion_point(field_set_allocated:freterapido.CalcularFreteRequest.limite)
}

// string token = 4;
inline void CalcularFreteRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CalcularFreteRequest::token() const {
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteRequest.token)
  return token_.GetNoArena();
}
inline void CalcularFreteRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freterapido.CalcularFreteRequest.token)
}
#if LANG_CXX11
inline void CalcularFreteRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freterapido.CalcularFreteRequest.token)
}
#endif
inline void CalcularFreteRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freterapido.CalcularFreteRequest.token)
}
inline void CalcularFreteRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freterapido.CalcularFreteRequest.token)
}
inline ::std::string* CalcularFreteRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:freterapido.CalcularFreteRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalcularFreteRequest::release_token() {
  // @@protoc_insertion_point(field_release:freterapido.CalcularFreteRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalcularFreteRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:freterapido.CalcularFreteRequest.token)
}

// string codigo_plataforma = 5;
inline void CalcularFreteRequest::clear_codigo_plataforma() {
  codigo_plataforma_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CalcularFreteRequest::codigo_plataforma() const {
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteRequest.codigo_plataforma)
  return codigo_plataforma_.GetNoArena();
}
inline void CalcularFreteRequest::set_codigo_plataforma(const ::std::string& value) {
  
  codigo_plataforma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freterapido.CalcularFreteRequest.codigo_plataforma)
}
#if LANG_CXX11
inline void CalcularFreteRequest::set_codigo_plataforma(::std::string&& value) {
  
  codigo_plataforma_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freterapido.CalcularFreteRequest.codigo_plataforma)
}
#endif
inline void CalcularFreteRequest::set_codigo_plataforma(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  codigo_plataforma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freterapido.CalcularFreteRequest.codigo_plataforma)
}
inline void CalcularFreteRequest::set_codigo_plataforma(const char* value, size_t size) {
  
  codigo_plataforma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freterapido.CalcularFreteRequest.codigo_plataforma)
}
inline ::std::string* CalcularFreteRequest::mutable_codigo_plataforma() {
  
  // @@protoc_insertion_point(field_mutable:freterapido.CalcularFreteRequest.codigo_plataforma)
  return codigo_plataforma_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalcularFreteRequest::release_codigo_plataforma() {
  // @@protoc_insertion_point(field_release:freterapido.CalcularFreteRequest.codigo_plataforma)
  
  return codigo_plataforma_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalcularFreteRequest::set_allocated_codigo_plataforma(::std::string* codigo_plataforma) {
  if (codigo_plataforma != NULL) {
    
  } else {
    
  }
  codigo_plataforma_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codigo_plataforma);
  // @@protoc_insertion_point(field_set_allocated:freterapido.CalcularFreteRequest.codigo_plataforma)
}

// bool retornar_consolidacao = 6;
inline void CalcularFreteRequest::clear_retornar_consolidacao() {
  retornar_consolidacao_ = false;
}
inline bool CalcularFreteRequest::retornar_consolidacao() const {
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteRequest.retornar_consolidacao)
  return retornar_consolidacao_;
}
inline void CalcularFreteRequest::set_retornar_consolidacao(bool value) {
  
  retornar_consolidacao_ = value;
  // @@protoc_insertion_point(field_set:freterapido.CalcularFreteRequest.retornar_consolidacao)
}

// .freterapido.RemetenteRequest remetente = 7;
inline bool CalcularFreteRequest::has_remetente() const {
  return this != internal_default_instance() && remetente_ != NULL;
}
inline void CalcularFreteRequest::clear_remetente() {
  if (GetArenaNoVirtual() == NULL && remetente_ != NULL) {
    delete remetente_;
  }
  remetente_ = NULL;
}
inline const ::freterapido::RemetenteRequest& CalcularFreteRequest::_internal_remetente() const {
  return *remetente_;
}
inline const ::freterapido::RemetenteRequest& CalcularFreteRequest::remetente() const {
  const ::freterapido::RemetenteRequest* p = remetente_;
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteRequest.remetente)
  return p != NULL ? *p : *reinterpret_cast<const ::freterapido::RemetenteRequest*>(
      &::freterapido::_RemetenteRequest_default_instance_);
}
inline ::freterapido::RemetenteRequest* CalcularFreteRequest::release_remetente() {
  // @@protoc_insertion_point(field_release:freterapido.CalcularFreteRequest.remetente)
  
  ::freterapido::RemetenteRequest* temp = remetente_;
  remetente_ = NULL;
  return temp;
}
inline ::freterapido::RemetenteRequest* CalcularFreteRequest::mutable_remetente() {
  
  if (remetente_ == NULL) {
    auto* p = CreateMaybeMessage<::freterapido::RemetenteRequest>(GetArenaNoVirtual());
    remetente_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.CalcularFreteRequest.remetente)
  return remetente_;
}
inline void CalcularFreteRequest::set_allocated_remetente(::freterapido::RemetenteRequest* remetente) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete remetente_;
  }
  if (remetente) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      remetente = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remetente, submessage_arena);
    }
    
  } else {
    
  }
  remetente_ = remetente;
  // @@protoc_insertion_point(field_set_allocated:freterapido.CalcularFreteRequest.remetente)
}

// .freterapido.ExpedidorRequest expedidor = 8;
inline bool CalcularFreteRequest::has_expedidor() const {
  return this != internal_default_instance() && expedidor_ != NULL;
}
inline void CalcularFreteRequest::clear_expedidor() {
  if (GetArenaNoVirtual() == NULL && expedidor_ != NULL) {
    delete expedidor_;
  }
  expedidor_ = NULL;
}
inline const ::freterapido::ExpedidorRequest& CalcularFreteRequest::_internal_expedidor() const {
  return *expedidor_;
}
inline const ::freterapido::ExpedidorRequest& CalcularFreteRequest::expedidor() const {
  const ::freterapido::ExpedidorRequest* p = expedidor_;
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteRequest.expedidor)
  return p != NULL ? *p : *reinterpret_cast<const ::freterapido::ExpedidorRequest*>(
      &::freterapido::_ExpedidorRequest_default_instance_);
}
inline ::freterapido::ExpedidorRequest* CalcularFreteRequest::release_expedidor() {
  // @@protoc_insertion_point(field_release:freterapido.CalcularFreteRequest.expedidor)
  
  ::freterapido::ExpedidorRequest* temp = expedidor_;
  expedidor_ = NULL;
  return temp;
}
inline ::freterapido::ExpedidorRequest* CalcularFreteRequest::mutable_expedidor() {
  
  if (expedidor_ == NULL) {
    auto* p = CreateMaybeMessage<::freterapido::ExpedidorRequest>(GetArenaNoVirtual());
    expedidor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.CalcularFreteRequest.expedidor)
  return expedidor_;
}
inline void CalcularFreteRequest::set_allocated_expedidor(::freterapido::ExpedidorRequest* expedidor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expedidor_;
  }
  if (expedidor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expedidor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expedidor, submessage_arena);
    }
    
  } else {
    
  }
  expedidor_ = expedidor;
  // @@protoc_insertion_point(field_set_allocated:freterapido.CalcularFreteRequest.expedidor)
}

// .freterapido.DestinatarioRequest destinatario = 9;
inline bool CalcularFreteRequest::has_destinatario() const {
  return this != internal_default_instance() && destinatario_ != NULL;
}
inline void CalcularFreteRequest::clear_destinatario() {
  if (GetArenaNoVirtual() == NULL && destinatario_ != NULL) {
    delete destinatario_;
  }
  destinatario_ = NULL;
}
inline const ::freterapido::DestinatarioRequest& CalcularFreteRequest::_internal_destinatario() const {
  return *destinatario_;
}
inline const ::freterapido::DestinatarioRequest& CalcularFreteRequest::destinatario() const {
  const ::freterapido::DestinatarioRequest* p = destinatario_;
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteRequest.destinatario)
  return p != NULL ? *p : *reinterpret_cast<const ::freterapido::DestinatarioRequest*>(
      &::freterapido::_DestinatarioRequest_default_instance_);
}
inline ::freterapido::DestinatarioRequest* CalcularFreteRequest::release_destinatario() {
  // @@protoc_insertion_point(field_release:freterapido.CalcularFreteRequest.destinatario)
  
  ::freterapido::DestinatarioRequest* temp = destinatario_;
  destinatario_ = NULL;
  return temp;
}
inline ::freterapido::DestinatarioRequest* CalcularFreteRequest::mutable_destinatario() {
  
  if (destinatario_ == NULL) {
    auto* p = CreateMaybeMessage<::freterapido::DestinatarioRequest>(GetArenaNoVirtual());
    destinatario_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.CalcularFreteRequest.destinatario)
  return destinatario_;
}
inline void CalcularFreteRequest::set_allocated_destinatario(::freterapido::DestinatarioRequest* destinatario) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destinatario_;
  }
  if (destinatario) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destinatario = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destinatario, submessage_arena);
    }
    
  } else {
    
  }
  destinatario_ = destinatario;
  // @@protoc_insertion_point(field_set_allocated:freterapido.CalcularFreteRequest.destinatario)
}

// repeated .freterapido.VolumeRequest volumes = 10;
inline int CalcularFreteRequest::volumes_size() const {
  return volumes_.size();
}
inline void CalcularFreteRequest::clear_volumes() {
  volumes_.Clear();
}
inline ::freterapido::VolumeRequest* CalcularFreteRequest::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:freterapido.CalcularFreteRequest.volumes)
  return volumes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeRequest >*
CalcularFreteRequest::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:freterapido.CalcularFreteRequest.volumes)
  return &volumes_;
}
inline const ::freterapido::VolumeRequest& CalcularFreteRequest::volumes(int index) const {
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteRequest.volumes)
  return volumes_.Get(index);
}
inline ::freterapido::VolumeRequest* CalcularFreteRequest::add_volumes() {
  // @@protoc_insertion_point(field_add:freterapido.CalcularFreteRequest.volumes)
  return volumes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeRequest >&
CalcularFreteRequest::volumes() const {
  // @@protoc_insertion_point(field_list:freterapido.CalcularFreteRequest.volumes)
  return volumes_;
}

// -------------------------------------------------------------------

// Endereco

// string cep = 1;
inline void Endereco::clear_cep() {
  cep_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Endereco::cep() const {
  // @@protoc_insertion_point(field_get:freterapido.Endereco.cep)
  return cep_.GetNoArena();
}
inline void Endereco::set_cep(const ::std::string& value) {
  
  cep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freterapido.Endereco.cep)
}
#if LANG_CXX11
inline void Endereco::set_cep(::std::string&& value) {
  
  cep_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freterapido.Endereco.cep)
}
#endif
inline void Endereco::set_cep(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freterapido.Endereco.cep)
}
inline void Endereco::set_cep(const char* value, size_t size) {
  
  cep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freterapido.Endereco.cep)
}
inline ::std::string* Endereco::mutable_cep() {
  
  // @@protoc_insertion_point(field_mutable:freterapido.Endereco.cep)
  return cep_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Endereco::release_cep() {
  // @@protoc_insertion_point(field_release:freterapido.Endereco.cep)
  
  return cep_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Endereco::set_allocated_cep(::std::string* cep) {
  if (cep != NULL) {
    
  } else {
    
  }
  cep_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cep);
  // @@protoc_insertion_point(field_set_allocated:freterapido.Endereco.cep)
}

// -------------------------------------------------------------------

// RemetenteRequest

// string cnpj = 1;
inline void RemetenteRequest::clear_cnpj() {
  cnpj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemetenteRequest::cnpj() const {
  // @@protoc_insertion_point(field_get:freterapido.RemetenteRequest.cnpj)
  return cnpj_.GetNoArena();
}
inline void RemetenteRequest::set_cnpj(const ::std::string& value) {
  
  cnpj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freterapido.RemetenteRequest.cnpj)
}
#if LANG_CXX11
inline void RemetenteRequest::set_cnpj(::std::string&& value) {
  
  cnpj_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freterapido.RemetenteRequest.cnpj)
}
#endif
inline void RemetenteRequest::set_cnpj(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cnpj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freterapido.RemetenteRequest.cnpj)
}
inline void RemetenteRequest::set_cnpj(const char* value, size_t size) {
  
  cnpj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freterapido.RemetenteRequest.cnpj)
}
inline ::std::string* RemetenteRequest::mutable_cnpj() {
  
  // @@protoc_insertion_point(field_mutable:freterapido.RemetenteRequest.cnpj)
  return cnpj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemetenteRequest::release_cnpj() {
  // @@protoc_insertion_point(field_release:freterapido.RemetenteRequest.cnpj)
  
  return cnpj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemetenteRequest::set_allocated_cnpj(::std::string* cnpj) {
  if (cnpj != NULL) {
    
  } else {
    
  }
  cnpj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cnpj);
  // @@protoc_insertion_point(field_set_allocated:freterapido.RemetenteRequest.cnpj)
}

// -------------------------------------------------------------------

// ExpedidorRequest

// .freterapido.Endereco endereco = 1;
inline bool ExpedidorRequest::has_endereco() const {
  return this != internal_default_instance() && endereco_ != NULL;
}
inline void ExpedidorRequest::clear_endereco() {
  if (GetArenaNoVirtual() == NULL && endereco_ != NULL) {
    delete endereco_;
  }
  endereco_ = NULL;
}
inline const ::freterapido::Endereco& ExpedidorRequest::_internal_endereco() const {
  return *endereco_;
}
inline const ::freterapido::Endereco& ExpedidorRequest::endereco() const {
  const ::freterapido::Endereco* p = endereco_;
  // @@protoc_insertion_point(field_get:freterapido.ExpedidorRequest.endereco)
  return p != NULL ? *p : *reinterpret_cast<const ::freterapido::Endereco*>(
      &::freterapido::_Endereco_default_instance_);
}
inline ::freterapido::Endereco* ExpedidorRequest::release_endereco() {
  // @@protoc_insertion_point(field_release:freterapido.ExpedidorRequest.endereco)
  
  ::freterapido::Endereco* temp = endereco_;
  endereco_ = NULL;
  return temp;
}
inline ::freterapido::Endereco* ExpedidorRequest::mutable_endereco() {
  
  if (endereco_ == NULL) {
    auto* p = CreateMaybeMessage<::freterapido::Endereco>(GetArenaNoVirtual());
    endereco_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.ExpedidorRequest.endereco)
  return endereco_;
}
inline void ExpedidorRequest::set_allocated_endereco(::freterapido::Endereco* endereco) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete endereco_;
  }
  if (endereco) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      endereco = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, endereco, submessage_arena);
    }
    
  } else {
    
  }
  endereco_ = endereco;
  // @@protoc_insertion_point(field_set_allocated:freterapido.ExpedidorRequest.endereco)
}

// -------------------------------------------------------------------

// DestinatarioRequest

// .freterapido.DestinatarioRequest.TipoPessoa tipo_pessoa = 1;
inline void DestinatarioRequest::clear_tipo_pessoa() {
  tipo_pessoa_ = 0;
}
inline ::freterapido::DestinatarioRequest_TipoPessoa DestinatarioRequest::tipo_pessoa() const {
  // @@protoc_insertion_point(field_get:freterapido.DestinatarioRequest.tipo_pessoa)
  return static_cast< ::freterapido::DestinatarioRequest_TipoPessoa >(tipo_pessoa_);
}
inline void DestinatarioRequest::set_tipo_pessoa(::freterapido::DestinatarioRequest_TipoPessoa value) {
  
  tipo_pessoa_ = value;
  // @@protoc_insertion_point(field_set:freterapido.DestinatarioRequest.tipo_pessoa)
}

// string cnpj_cpf = 2;
inline void DestinatarioRequest::clear_cnpj_cpf() {
  cnpj_cpf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DestinatarioRequest::cnpj_cpf() const {
  // @@protoc_insertion_point(field_get:freterapido.DestinatarioRequest.cnpj_cpf)
  return cnpj_cpf_.GetNoArena();
}
inline void DestinatarioRequest::set_cnpj_cpf(const ::std::string& value) {
  
  cnpj_cpf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freterapido.DestinatarioRequest.cnpj_cpf)
}
#if LANG_CXX11
inline void DestinatarioRequest::set_cnpj_cpf(::std::string&& value) {
  
  cnpj_cpf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freterapido.DestinatarioRequest.cnpj_cpf)
}
#endif
inline void DestinatarioRequest::set_cnpj_cpf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cnpj_cpf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freterapido.DestinatarioRequest.cnpj_cpf)
}
inline void DestinatarioRequest::set_cnpj_cpf(const char* value, size_t size) {
  
  cnpj_cpf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freterapido.DestinatarioRequest.cnpj_cpf)
}
inline ::std::string* DestinatarioRequest::mutable_cnpj_cpf() {
  
  // @@protoc_insertion_point(field_mutable:freterapido.DestinatarioRequest.cnpj_cpf)
  return cnpj_cpf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestinatarioRequest::release_cnpj_cpf() {
  // @@protoc_insertion_point(field_release:freterapido.DestinatarioRequest.cnpj_cpf)
  
  return cnpj_cpf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestinatarioRequest::set_allocated_cnpj_cpf(::std::string* cnpj_cpf) {
  if (cnpj_cpf != NULL) {
    
  } else {
    
  }
  cnpj_cpf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cnpj_cpf);
  // @@protoc_insertion_point(field_set_allocated:freterapido.DestinatarioRequest.cnpj_cpf)
}

// string inscricao_estadual = 3;
inline void DestinatarioRequest::clear_inscricao_estadual() {
  inscricao_estadual_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DestinatarioRequest::inscricao_estadual() const {
  // @@protoc_insertion_point(field_get:freterapido.DestinatarioRequest.inscricao_estadual)
  return inscricao_estadual_.GetNoArena();
}
inline void DestinatarioRequest::set_inscricao_estadual(const ::std::string& value) {
  
  inscricao_estadual_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freterapido.DestinatarioRequest.inscricao_estadual)
}
#if LANG_CXX11
inline void DestinatarioRequest::set_inscricao_estadual(::std::string&& value) {
  
  inscricao_estadual_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freterapido.DestinatarioRequest.inscricao_estadual)
}
#endif
inline void DestinatarioRequest::set_inscricao_estadual(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inscricao_estadual_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freterapido.DestinatarioRequest.inscricao_estadual)
}
inline void DestinatarioRequest::set_inscricao_estadual(const char* value, size_t size) {
  
  inscricao_estadual_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freterapido.DestinatarioRequest.inscricao_estadual)
}
inline ::std::string* DestinatarioRequest::mutable_inscricao_estadual() {
  
  // @@protoc_insertion_point(field_mutable:freterapido.DestinatarioRequest.inscricao_estadual)
  return inscricao_estadual_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestinatarioRequest::release_inscricao_estadual() {
  // @@protoc_insertion_point(field_release:freterapido.DestinatarioRequest.inscricao_estadual)
  
  return inscricao_estadual_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestinatarioRequest::set_allocated_inscricao_estadual(::std::string* inscricao_estadual) {
  if (inscricao_estadual != NULL) {
    
  } else {
    
  }
  inscricao_estadual_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inscricao_estadual);
  // @@protoc_insertion_point(field_set_allocated:freterapido.DestinatarioRequest.inscricao_estadual)
}

// .freterapido.Endereco endereco = 4;
inline bool DestinatarioRequest::has_endereco() const {
  return this != internal_default_instance() && endereco_ != NULL;
}
inline void DestinatarioRequest::clear_endereco() {
  if (GetArenaNoVirtual() == NULL && endereco_ != NULL) {
    delete endereco_;
  }
  endereco_ = NULL;
}
inline const ::freterapido::Endereco& DestinatarioRequest::_internal_endereco() const {
  return *endereco_;
}
inline const ::freterapido::Endereco& DestinatarioRequest::endereco() const {
  const ::freterapido::Endereco* p = endereco_;
  // @@protoc_insertion_point(field_get:freterapido.DestinatarioRequest.endereco)
  return p != NULL ? *p : *reinterpret_cast<const ::freterapido::Endereco*>(
      &::freterapido::_Endereco_default_instance_);
}
inline ::freterapido::Endereco* DestinatarioRequest::release_endereco() {
  // @@protoc_insertion_point(field_release:freterapido.DestinatarioRequest.endereco)
  
  ::freterapido::Endereco* temp = endereco_;
  endereco_ = NULL;
  return temp;
}
inline ::freterapido::Endereco* DestinatarioRequest::mutable_endereco() {
  
  if (endereco_ == NULL) {
    auto* p = CreateMaybeMessage<::freterapido::Endereco>(GetArenaNoVirtual());
    endereco_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.DestinatarioRequest.endereco)
  return endereco_;
}
inline void DestinatarioRequest::set_allocated_endereco(::freterapido::Endereco* endereco) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete endereco_;
  }
  if (endereco) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      endereco = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, endereco, submessage_arena);
    }
    
  } else {
    
  }
  endereco_ = endereco;
  // @@protoc_insertion_point(field_set_allocated:freterapido.DestinatarioRequest.endereco)
}

// -------------------------------------------------------------------

// VolumeRequest

// int32 tipo = 1;
inline void VolumeRequest::clear_tipo() {
  tipo_ = 0;
}
inline ::google::protobuf::int32 VolumeRequest::tipo() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.tipo)
  return tipo_;
}
inline void VolumeRequest::set_tipo(::google::protobuf::int32 value) {
  
  tipo_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeRequest.tipo)
}

// .google.protobuf.StringValue sku = 2;
inline bool VolumeRequest::has_sku() const {
  return this != internal_default_instance() && sku_ != NULL;
}
inline const ::google::protobuf::StringValue& VolumeRequest::_internal_sku() const {
  return *sku_;
}
inline const ::google::protobuf::StringValue& VolumeRequest::sku() const {
  const ::google::protobuf::StringValue* p = sku_;
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.sku)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* VolumeRequest::release_sku() {
  // @@protoc_insertion_point(field_release:freterapido.VolumeRequest.sku)
  
  ::google::protobuf::StringValue* temp = sku_;
  sku_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* VolumeRequest::mutable_sku() {
  
  if (sku_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    sku_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.VolumeRequest.sku)
  return sku_;
}
inline void VolumeRequest::set_allocated_sku(::google::protobuf::StringValue* sku) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sku_);
  }
  if (sku) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(sku)->GetArena();
    if (message_arena != submessage_arena) {
      sku = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sku, submessage_arena);
    }
    
  } else {
    
  }
  sku_ = sku;
  // @@protoc_insertion_point(field_set_allocated:freterapido.VolumeRequest.sku)
}

// .google.protobuf.StringValue descricao = 3;
inline bool VolumeRequest::has_descricao() const {
  return this != internal_default_instance() && descricao_ != NULL;
}
inline const ::google::protobuf::StringValue& VolumeRequest::_internal_descricao() const {
  return *descricao_;
}
inline const ::google::protobuf::StringValue& VolumeRequest::descricao() const {
  const ::google::protobuf::StringValue* p = descricao_;
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.descricao)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* VolumeRequest::release_descricao() {
  // @@protoc_insertion_point(field_release:freterapido.VolumeRequest.descricao)
  
  ::google::protobuf::StringValue* temp = descricao_;
  descricao_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* VolumeRequest::mutable_descricao() {
  
  if (descricao_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    descricao_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.VolumeRequest.descricao)
  return descricao_;
}
inline void VolumeRequest::set_allocated_descricao(::google::protobuf::StringValue* descricao) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(descricao_);
  }
  if (descricao) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(descricao)->GetArena();
    if (message_arena != submessage_arena) {
      descricao = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, descricao, submessage_arena);
    }
    
  } else {
    
  }
  descricao_ = descricao;
  // @@protoc_insertion_point(field_set_allocated:freterapido.VolumeRequest.descricao)
}

// int32 quantidade = 4;
inline void VolumeRequest::clear_quantidade() {
  quantidade_ = 0;
}
inline ::google::protobuf::int32 VolumeRequest::quantidade() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.quantidade)
  return quantidade_;
}
inline void VolumeRequest::set_quantidade(::google::protobuf::int32 value) {
  
  quantidade_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeRequest.quantidade)
}

// double altura = 5;
inline void VolumeRequest::clear_altura() {
  altura_ = 0;
}
inline double VolumeRequest::altura() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.altura)
  return altura_;
}
inline void VolumeRequest::set_altura(double value) {
  
  altura_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeRequest.altura)
}

// double largura = 6;
inline void VolumeRequest::clear_largura() {
  largura_ = 0;
}
inline double VolumeRequest::largura() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.largura)
  return largura_;
}
inline void VolumeRequest::set_largura(double value) {
  
  largura_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeRequest.largura)
}

// double comprimento = 7;
inline void VolumeRequest::clear_comprimento() {
  comprimento_ = 0;
}
inline double VolumeRequest::comprimento() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.comprimento)
  return comprimento_;
}
inline void VolumeRequest::set_comprimento(double value) {
  
  comprimento_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeRequest.comprimento)
}

// double peso = 8;
inline void VolumeRequest::clear_peso() {
  peso_ = 0;
}
inline double VolumeRequest::peso() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.peso)
  return peso_;
}
inline void VolumeRequest::set_peso(double value) {
  
  peso_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeRequest.peso)
}

// double valor = 9;
inline void VolumeRequest::clear_valor() {
  valor_ = 0;
}
inline double VolumeRequest::valor() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.valor)
  return valor_;
}
inline void VolumeRequest::set_valor(double value) {
  
  valor_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeRequest.valor)
}

// int32 volumes_produto = 10;
inline void VolumeRequest::clear_volumes_produto() {
  volumes_produto_ = 0;
}
inline ::google::protobuf::int32 VolumeRequest::volumes_produto() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.volumes_produto)
  return volumes_produto_;
}
inline void VolumeRequest::set_volumes_produto(::google::protobuf::int32 value) {
  
  volumes_produto_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeRequest.volumes_produto)
}

// bool consolidar = 11;
inline void VolumeRequest::clear_consolidar() {
  consolidar_ = false;
}
inline bool VolumeRequest::consolidar() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.consolidar)
  return consolidar_;
}
inline void VolumeRequest::set_consolidar(bool value) {
  
  consolidar_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeRequest.consolidar)
}

// bool sobreposto = 12;
inline void VolumeRequest::clear_sobreposto() {
  sobreposto_ = false;
}
inline bool VolumeRequest::sobreposto() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.sobreposto)
  return sobreposto_;
}
inline void VolumeRequest::set_sobreposto(bool value) {
  
  sobreposto_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeRequest.sobreposto)
}

// bool tombar = 13;
inline void VolumeRequest::clear_tombar() {
  tombar_ = false;
}
inline bool VolumeRequest::tombar() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeRequest.tombar)
  return tombar_;
}
inline void VolumeRequest::set_tombar(bool value) {
  
  tombar_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeRequest.tombar)
}

// -------------------------------------------------------------------

// CalcularFreteResponse

// string token_oferta = 1;
inline void CalcularFreteResponse::clear_token_oferta() {
  token_oferta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CalcularFreteResponse::token_oferta() const {
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteResponse.token_oferta)
  return token_oferta_.GetNoArena();
}
inline void CalcularFreteResponse::set_token_oferta(const ::std::string& value) {
  
  token_oferta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freterapido.CalcularFreteResponse.token_oferta)
}
#if LANG_CXX11
inline void CalcularFreteResponse::set_token_oferta(::std::string&& value) {
  
  token_oferta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freterapido.CalcularFreteResponse.token_oferta)
}
#endif
inline void CalcularFreteResponse::set_token_oferta(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_oferta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freterapido.CalcularFreteResponse.token_oferta)
}
inline void CalcularFreteResponse::set_token_oferta(const char* value, size_t size) {
  
  token_oferta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freterapido.CalcularFreteResponse.token_oferta)
}
inline ::std::string* CalcularFreteResponse::mutable_token_oferta() {
  
  // @@protoc_insertion_point(field_mutable:freterapido.CalcularFreteResponse.token_oferta)
  return token_oferta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalcularFreteResponse::release_token_oferta() {
  // @@protoc_insertion_point(field_release:freterapido.CalcularFreteResponse.token_oferta)
  
  return token_oferta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalcularFreteResponse::set_allocated_token_oferta(::std::string* token_oferta) {
  if (token_oferta != NULL) {
    
  } else {
    
  }
  token_oferta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token_oferta);
  // @@protoc_insertion_point(field_set_allocated:freterapido.CalcularFreteResponse.token_oferta)
}

// repeated .freterapido.TransportadoraResponse transportadoras = 2;
inline int CalcularFreteResponse::transportadoras_size() const {
  return transportadoras_.size();
}
inline void CalcularFreteResponse::clear_transportadoras() {
  transportadoras_.Clear();
}
inline ::freterapido::TransportadoraResponse* CalcularFreteResponse::mutable_transportadoras(int index) {
  // @@protoc_insertion_point(field_mutable:freterapido.CalcularFreteResponse.transportadoras)
  return transportadoras_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::freterapido::TransportadoraResponse >*
CalcularFreteResponse::mutable_transportadoras() {
  // @@protoc_insertion_point(field_mutable_list:freterapido.CalcularFreteResponse.transportadoras)
  return &transportadoras_;
}
inline const ::freterapido::TransportadoraResponse& CalcularFreteResponse::transportadoras(int index) const {
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteResponse.transportadoras)
  return transportadoras_.Get(index);
}
inline ::freterapido::TransportadoraResponse* CalcularFreteResponse::add_transportadoras() {
  // @@protoc_insertion_point(field_add:freterapido.CalcularFreteResponse.transportadoras)
  return transportadoras_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::freterapido::TransportadoraResponse >&
CalcularFreteResponse::transportadoras() const {
  // @@protoc_insertion_point(field_list:freterapido.CalcularFreteResponse.transportadoras)
  return transportadoras_;
}

// repeated .freterapido.VolumeResponse volumes = 3;
inline int CalcularFreteResponse::volumes_size() const {
  return volumes_.size();
}
inline void CalcularFreteResponse::clear_volumes() {
  volumes_.Clear();
}
inline ::freterapido::VolumeResponse* CalcularFreteResponse::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:freterapido.CalcularFreteResponse.volumes)
  return volumes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeResponse >*
CalcularFreteResponse::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:freterapido.CalcularFreteResponse.volumes)
  return &volumes_;
}
inline const ::freterapido::VolumeResponse& CalcularFreteResponse::volumes(int index) const {
  // @@protoc_insertion_point(field_get:freterapido.CalcularFreteResponse.volumes)
  return volumes_.Get(index);
}
inline ::freterapido::VolumeResponse* CalcularFreteResponse::add_volumes() {
  // @@protoc_insertion_point(field_add:freterapido.CalcularFreteResponse.volumes)
  return volumes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeResponse >&
CalcularFreteResponse::volumes() const {
  // @@protoc_insertion_point(field_list:freterapido.CalcularFreteResponse.volumes)
  return volumes_;
}

// -------------------------------------------------------------------

// TransportadoraResponse

// int64 oferta = 1;
inline void TransportadoraResponse::clear_oferta() {
  oferta_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransportadoraResponse::oferta() const {
  // @@protoc_insertion_point(field_get:freterapido.TransportadoraResponse.oferta)
  return oferta_;
}
inline void TransportadoraResponse::set_oferta(::google::protobuf::int64 value) {
  
  oferta_ = value;
  // @@protoc_insertion_point(field_set:freterapido.TransportadoraResponse.oferta)
}

// string cnpj = 2;
inline void TransportadoraResponse::clear_cnpj() {
  cnpj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransportadoraResponse::cnpj() const {
  // @@protoc_insertion_point(field_get:freterapido.TransportadoraResponse.cnpj)
  return cnpj_.GetNoArena();
}
inline void TransportadoraResponse::set_cnpj(const ::std::string& value) {
  
  cnpj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freterapido.TransportadoraResponse.cnpj)
}
#if LANG_CXX11
inline void TransportadoraResponse::set_cnpj(::std::string&& value) {
  
  cnpj_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freterapido.TransportadoraResponse.cnpj)
}
#endif
inline void TransportadoraResponse::set_cnpj(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cnpj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freterapido.TransportadoraResponse.cnpj)
}
inline void TransportadoraResponse::set_cnpj(const char* value, size_t size) {
  
  cnpj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freterapido.TransportadoraResponse.cnpj)
}
inline ::std::string* TransportadoraResponse::mutable_cnpj() {
  
  // @@protoc_insertion_point(field_mutable:freterapido.TransportadoraResponse.cnpj)
  return cnpj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransportadoraResponse::release_cnpj() {
  // @@protoc_insertion_point(field_release:freterapido.TransportadoraResponse.cnpj)
  
  return cnpj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransportadoraResponse::set_allocated_cnpj(::std::string* cnpj) {
  if (cnpj != NULL) {
    
  } else {
    
  }
  cnpj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cnpj);
  // @@protoc_insertion_point(field_set_allocated:freterapido.TransportadoraResponse.cnpj)
}

// string logotipo = 3;
inline void TransportadoraResponse::clear_logotipo() {
  logotipo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransportadoraResponse::logotipo() const {
  // @@protoc_insertion_point(field_get:freterapido.TransportadoraResponse.logotipo)
  return logotipo_.GetNoArena();
}
inline void TransportadoraResponse::set_logotipo(const ::std::string& value) {
  
  logotipo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freterapido.TransportadoraResponse.logotipo)
}
#if LANG_CXX11
inline void TransportadoraResponse::set_logotipo(::std::string&& value) {
  
  logotipo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freterapido.TransportadoraResponse.logotipo)
}
#endif
inline void TransportadoraResponse::set_logotipo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logotipo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freterapido.TransportadoraResponse.logotipo)
}
inline void TransportadoraResponse::set_logotipo(const char* value, size_t size) {
  
  logotipo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freterapido.TransportadoraResponse.logotipo)
}
inline ::std::string* TransportadoraResponse::mutable_logotipo() {
  
  // @@protoc_insertion_point(field_mutable:freterapido.TransportadoraResponse.logotipo)
  return logotipo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransportadoraResponse::release_logotipo() {
  // @@protoc_insertion_point(field_release:freterapido.TransportadoraResponse.logotipo)
  
  return logotipo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransportadoraResponse::set_allocated_logotipo(::std::string* logotipo) {
  if (logotipo != NULL) {
    
  } else {
    
  }
  logotipo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logotipo);
  // @@protoc_insertion_point(field_set_allocated:freterapido.TransportadoraResponse.logotipo)
}

// string nome = 4;
inline void TransportadoraResponse::clear_nome() {
  nome_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransportadoraResponse::nome() const {
  // @@protoc_insertion_point(field_get:freterapido.TransportadoraResponse.nome)
  return nome_.GetNoArena();
}
inline void TransportadoraResponse::set_nome(const ::std::string& value) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freterapido.TransportadoraResponse.nome)
}
#if LANG_CXX11
inline void TransportadoraResponse::set_nome(::std::string&& value) {
  
  nome_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freterapido.TransportadoraResponse.nome)
}
#endif
inline void TransportadoraResponse::set_nome(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freterapido.TransportadoraResponse.nome)
}
inline void TransportadoraResponse::set_nome(const char* value, size_t size) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freterapido.TransportadoraResponse.nome)
}
inline ::std::string* TransportadoraResponse::mutable_nome() {
  
  // @@protoc_insertion_point(field_mutable:freterapido.TransportadoraResponse.nome)
  return nome_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransportadoraResponse::release_nome() {
  // @@protoc_insertion_point(field_release:freterapido.TransportadoraResponse.nome)
  
  return nome_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransportadoraResponse::set_allocated_nome(::std::string* nome) {
  if (nome != NULL) {
    
  } else {
    
  }
  nome_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nome);
  // @@protoc_insertion_point(field_set_allocated:freterapido.TransportadoraResponse.nome)
}

// string servico = 5;
inline void TransportadoraResponse::clear_servico() {
  servico_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransportadoraResponse::servico() const {
  // @@protoc_insertion_point(field_get:freterapido.TransportadoraResponse.servico)
  return servico_.GetNoArena();
}
inline void TransportadoraResponse::set_servico(const ::std::string& value) {
  
  servico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freterapido.TransportadoraResponse.servico)
}
#if LANG_CXX11
inline void TransportadoraResponse::set_servico(::std::string&& value) {
  
  servico_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freterapido.TransportadoraResponse.servico)
}
#endif
inline void TransportadoraResponse::set_servico(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freterapido.TransportadoraResponse.servico)
}
inline void TransportadoraResponse::set_servico(const char* value, size_t size) {
  
  servico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freterapido.TransportadoraResponse.servico)
}
inline ::std::string* TransportadoraResponse::mutable_servico() {
  
  // @@protoc_insertion_point(field_mutable:freterapido.TransportadoraResponse.servico)
  return servico_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransportadoraResponse::release_servico() {
  // @@protoc_insertion_point(field_release:freterapido.TransportadoraResponse.servico)
  
  return servico_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransportadoraResponse::set_allocated_servico(::std::string* servico) {
  if (servico != NULL) {
    
  } else {
    
  }
  servico_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servico);
  // @@protoc_insertion_point(field_set_allocated:freterapido.TransportadoraResponse.servico)
}

// .google.protobuf.StringValue descricao_servico = 6;
inline bool TransportadoraResponse::has_descricao_servico() const {
  return this != internal_default_instance() && descricao_servico_ != NULL;
}
inline const ::google::protobuf::StringValue& TransportadoraResponse::_internal_descricao_servico() const {
  return *descricao_servico_;
}
inline const ::google::protobuf::StringValue& TransportadoraResponse::descricao_servico() const {
  const ::google::protobuf::StringValue* p = descricao_servico_;
  // @@protoc_insertion_point(field_get:freterapido.TransportadoraResponse.descricao_servico)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* TransportadoraResponse::release_descricao_servico() {
  // @@protoc_insertion_point(field_release:freterapido.TransportadoraResponse.descricao_servico)
  
  ::google::protobuf::StringValue* temp = descricao_servico_;
  descricao_servico_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* TransportadoraResponse::mutable_descricao_servico() {
  
  if (descricao_servico_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    descricao_servico_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.TransportadoraResponse.descricao_servico)
  return descricao_servico_;
}
inline void TransportadoraResponse::set_allocated_descricao_servico(::google::protobuf::StringValue* descricao_servico) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(descricao_servico_);
  }
  if (descricao_servico) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(descricao_servico)->GetArena();
    if (message_arena != submessage_arena) {
      descricao_servico = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, descricao_servico, submessage_arena);
    }
    
  } else {
    
  }
  descricao_servico_ = descricao_servico;
  // @@protoc_insertion_point(field_set_allocated:freterapido.TransportadoraResponse.descricao_servico)
}

// int32 prazo_entrega = 7;
inline void TransportadoraResponse::clear_prazo_entrega() {
  prazo_entrega_ = 0;
}
inline ::google::protobuf::int32 TransportadoraResponse::prazo_entrega() const {
  // @@protoc_insertion_point(field_get:freterapido.TransportadoraResponse.prazo_entrega)
  return prazo_entrega_;
}
inline void TransportadoraResponse::set_prazo_entrega(::google::protobuf::int32 value) {
  
  prazo_entrega_ = value;
  // @@protoc_insertion_point(field_set:freterapido.TransportadoraResponse.prazo_entrega)
}

// .google.protobuf.Timestamp validade = 8;
inline bool TransportadoraResponse::has_validade() const {
  return this != internal_default_instance() && validade_ != NULL;
}
inline const ::google::protobuf::Timestamp& TransportadoraResponse::_internal_validade() const {
  return *validade_;
}
inline const ::google::protobuf::Timestamp& TransportadoraResponse::validade() const {
  const ::google::protobuf::Timestamp* p = validade_;
  // @@protoc_insertion_point(field_get:freterapido.TransportadoraResponse.validade)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransportadoraResponse::release_validade() {
  // @@protoc_insertion_point(field_release:freterapido.TransportadoraResponse.validade)
  
  ::google::protobuf::Timestamp* temp = validade_;
  validade_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TransportadoraResponse::mutable_validade() {
  
  if (validade_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    validade_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.TransportadoraResponse.validade)
  return validade_;
}
inline void TransportadoraResponse::set_allocated_validade(::google::protobuf::Timestamp* validade) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(validade_);
  }
  if (validade) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(validade)->GetArena();
    if (message_arena != submessage_arena) {
      validade = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, validade, submessage_arena);
    }
    
  } else {
    
  }
  validade_ = validade;
  // @@protoc_insertion_point(field_set_allocated:freterapido.TransportadoraResponse.validade)
}

// double custo_frete = 9;
inline void TransportadoraResponse::clear_custo_frete() {
  custo_frete_ = 0;
}
inline double TransportadoraResponse::custo_frete() const {
  // @@protoc_insertion_point(field_get:freterapido.TransportadoraResponse.custo_frete)
  return custo_frete_;
}
inline void TransportadoraResponse::set_custo_frete(double value) {
  
  custo_frete_ = value;
  // @@protoc_insertion_point(field_set:freterapido.TransportadoraResponse.custo_frete)
}

// double preco_frete = 10;
inline void TransportadoraResponse::clear_preco_frete() {
  preco_frete_ = 0;
}
inline double TransportadoraResponse::preco_frete() const {
  // @@protoc_insertion_point(field_get:freterapido.TransportadoraResponse.preco_frete)
  return preco_frete_;
}
inline void TransportadoraResponse::set_preco_frete(double value) {
  
  preco_frete_ = value;
  // @@protoc_insertion_point(field_set:freterapido.TransportadoraResponse.preco_frete)
}

// -------------------------------------------------------------------

// VolumeResponse

// int32 tipo = 1;
inline void VolumeResponse::clear_tipo() {
  tipo_ = 0;
}
inline ::google::protobuf::int32 VolumeResponse::tipo() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeResponse.tipo)
  return tipo_;
}
inline void VolumeResponse::set_tipo(::google::protobuf::int32 value) {
  
  tipo_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeResponse.tipo)
}

// .google.protobuf.StringValue sku = 2;
inline bool VolumeResponse::has_sku() const {
  return this != internal_default_instance() && sku_ != NULL;
}
inline const ::google::protobuf::StringValue& VolumeResponse::_internal_sku() const {
  return *sku_;
}
inline const ::google::protobuf::StringValue& VolumeResponse::sku() const {
  const ::google::protobuf::StringValue* p = sku_;
  // @@protoc_insertion_point(field_get:freterapido.VolumeResponse.sku)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* VolumeResponse::release_sku() {
  // @@protoc_insertion_point(field_release:freterapido.VolumeResponse.sku)
  
  ::google::protobuf::StringValue* temp = sku_;
  sku_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* VolumeResponse::mutable_sku() {
  
  if (sku_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    sku_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.VolumeResponse.sku)
  return sku_;
}
inline void VolumeResponse::set_allocated_sku(::google::protobuf::StringValue* sku) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sku_);
  }
  if (sku) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(sku)->GetArena();
    if (message_arena != submessage_arena) {
      sku = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sku, submessage_arena);
    }
    
  } else {
    
  }
  sku_ = sku;
  // @@protoc_insertion_point(field_set_allocated:freterapido.VolumeResponse.sku)
}

// .google.protobuf.StringValue descricao = 3;
inline bool VolumeResponse::has_descricao() const {
  return this != internal_default_instance() && descricao_ != NULL;
}
inline const ::google::protobuf::StringValue& VolumeResponse::_internal_descricao() const {
  return *descricao_;
}
inline const ::google::protobuf::StringValue& VolumeResponse::descricao() const {
  const ::google::protobuf::StringValue* p = descricao_;
  // @@protoc_insertion_point(field_get:freterapido.VolumeResponse.descricao)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* VolumeResponse::release_descricao() {
  // @@protoc_insertion_point(field_release:freterapido.VolumeResponse.descricao)
  
  ::google::protobuf::StringValue* temp = descricao_;
  descricao_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* VolumeResponse::mutable_descricao() {
  
  if (descricao_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    descricao_ = p;
  }
  // @@protoc_insertion_point(field_mutable:freterapido.VolumeResponse.descricao)
  return descricao_;
}
inline void VolumeResponse::set_allocated_descricao(::google::protobuf::StringValue* descricao) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(descricao_);
  }
  if (descricao) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(descricao)->GetArena();
    if (message_arena != submessage_arena) {
      descricao = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, descricao, submessage_arena);
    }
    
  } else {
    
  }
  descricao_ = descricao;
  // @@protoc_insertion_point(field_set_allocated:freterapido.VolumeResponse.descricao)
}

// int32 quantidade = 4;
inline void VolumeResponse::clear_quantidade() {
  quantidade_ = 0;
}
inline ::google::protobuf::int32 VolumeResponse::quantidade() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeResponse.quantidade)
  return quantidade_;
}
inline void VolumeResponse::set_quantidade(::google::protobuf::int32 value) {
  
  quantidade_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeResponse.quantidade)
}

// double altura = 5;
inline void VolumeResponse::clear_altura() {
  altura_ = 0;
}
inline double VolumeResponse::altura() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeResponse.altura)
  return altura_;
}
inline void VolumeResponse::set_altura(double value) {
  
  altura_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeResponse.altura)
}

// double largura = 6;
inline void VolumeResponse::clear_largura() {
  largura_ = 0;
}
inline double VolumeResponse::largura() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeResponse.largura)
  return largura_;
}
inline void VolumeResponse::set_largura(double value) {
  
  largura_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeResponse.largura)
}

// double comprimento = 7;
inline void VolumeResponse::clear_comprimento() {
  comprimento_ = 0;
}
inline double VolumeResponse::comprimento() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeResponse.comprimento)
  return comprimento_;
}
inline void VolumeResponse::set_comprimento(double value) {
  
  comprimento_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeResponse.comprimento)
}

// double peso = 8;
inline void VolumeResponse::clear_peso() {
  peso_ = 0;
}
inline double VolumeResponse::peso() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeResponse.peso)
  return peso_;
}
inline void VolumeResponse::set_peso(double value) {
  
  peso_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeResponse.peso)
}

// double valor = 9;
inline void VolumeResponse::clear_valor() {
  valor_ = 0;
}
inline double VolumeResponse::valor() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeResponse.valor)
  return valor_;
}
inline void VolumeResponse::set_valor(double value) {
  
  valor_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeResponse.valor)
}

// int32 volumes_produto = 10;
inline void VolumeResponse::clear_volumes_produto() {
  volumes_produto_ = 0;
}
inline ::google::protobuf::int32 VolumeResponse::volumes_produto() const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeResponse.volumes_produto)
  return volumes_produto_;
}
inline void VolumeResponse::set_volumes_produto(::google::protobuf::int32 value) {
  
  volumes_produto_ = value;
  // @@protoc_insertion_point(field_set:freterapido.VolumeResponse.volumes_produto)
}

// repeated .freterapido.VolumeResponse items = 11;
inline int VolumeResponse::items_size() const {
  return items_.size();
}
inline void VolumeResponse::clear_items() {
  items_.Clear();
}
inline ::freterapido::VolumeResponse* VolumeResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:freterapido.VolumeResponse.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeResponse >*
VolumeResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:freterapido.VolumeResponse.items)
  return &items_;
}
inline const ::freterapido::VolumeResponse& VolumeResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:freterapido.VolumeResponse.items)
  return items_.Get(index);
}
inline ::freterapido::VolumeResponse* VolumeResponse::add_items() {
  // @@protoc_insertion_point(field_add:freterapido.VolumeResponse.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::freterapido::VolumeResponse >&
VolumeResponse::items() const {
  // @@protoc_insertion_point(field_list:freterapido.VolumeResponse.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace freterapido

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::freterapido::CalcularFreteRequest_TipoCobranca> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::freterapido::CalcularFreteRequest_TipoCobranca>() {
  return ::freterapido::CalcularFreteRequest_TipoCobranca_descriptor();
}
template <> struct is_proto_enum< ::freterapido::CalcularFreteRequest_Filtro> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::freterapido::CalcularFreteRequest_Filtro>() {
  return ::freterapido::CalcularFreteRequest_Filtro_descriptor();
}
template <> struct is_proto_enum< ::freterapido::DestinatarioRequest_TipoPessoa> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::freterapido::DestinatarioRequest_TipoPessoa>() {
  return ::freterapido::DestinatarioRequest_TipoPessoa_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_freterapido_2eproto
