/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.freterapido.VolumeRequest');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.google.protobuf.StringValue');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freterapido.VolumeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freterapido.VolumeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.freterapido.VolumeRequest.displayName = 'proto.freterapido.VolumeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freterapido.VolumeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freterapido.VolumeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freterapido.VolumeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freterapido.VolumeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tipo: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sku: (f = msg.getSku()) && proto.google.protobuf.StringValue.toObject(includeInstance, f),
    descricao: (f = msg.getDescricao()) && proto.google.protobuf.StringValue.toObject(includeInstance, f),
    quantidade: jspb.Message.getFieldWithDefault(msg, 4, 0),
    altura: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    largura: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    comprimento: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    peso: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    valor: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    volumesProduto: jspb.Message.getFieldWithDefault(msg, 10, 0),
    consolidar: jspb.Message.getFieldWithDefault(msg, 11, false),
    sobreposto: jspb.Message.getFieldWithDefault(msg, 12, false),
    tombar: jspb.Message.getFieldWithDefault(msg, 13, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freterapido.VolumeRequest}
 */
proto.freterapido.VolumeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freterapido.VolumeRequest;
  return proto.freterapido.VolumeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freterapido.VolumeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freterapido.VolumeRequest}
 */
proto.freterapido.VolumeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTipo(value);
      break;
    case 2:
      var value = new proto.google.protobuf.StringValue;
      reader.readMessage(value,proto.google.protobuf.StringValue.deserializeBinaryFromReader);
      msg.setSku(value);
      break;
    case 3:
      var value = new proto.google.protobuf.StringValue;
      reader.readMessage(value,proto.google.protobuf.StringValue.deserializeBinaryFromReader);
      msg.setDescricao(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantidade(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAltura(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLargura(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setComprimento(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPeso(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValor(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVolumesProduto(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConsolidar(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSobreposto(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTombar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freterapido.VolumeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freterapido.VolumeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freterapido.VolumeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freterapido.VolumeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTipo();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSku();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getDescricao();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.protobuf.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getQuantidade();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAltura();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getLargura();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getComprimento();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getPeso();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getValor();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getVolumesProduto();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getConsolidar();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getSobreposto();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getTombar();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional int32 tipo = 1;
 * @return {number}
 */
proto.freterapido.VolumeRequest.prototype.getTipo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.freterapido.VolumeRequest.prototype.setTipo = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.StringValue sku = 2;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.freterapido.VolumeRequest.prototype.getSku = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.StringValue, 2));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.freterapido.VolumeRequest.prototype.setSku = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.freterapido.VolumeRequest.prototype.clearSku = function() {
  this.setSku(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.freterapido.VolumeRequest.prototype.hasSku = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.StringValue descricao = 3;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.freterapido.VolumeRequest.prototype.getDescricao = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.StringValue, 3));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.freterapido.VolumeRequest.prototype.setDescricao = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.freterapido.VolumeRequest.prototype.clearDescricao = function() {
  this.setDescricao(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.freterapido.VolumeRequest.prototype.hasDescricao = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 quantidade = 4;
 * @return {number}
 */
proto.freterapido.VolumeRequest.prototype.getQuantidade = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.freterapido.VolumeRequest.prototype.setQuantidade = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double altura = 5;
 * @return {number}
 */
proto.freterapido.VolumeRequest.prototype.getAltura = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.freterapido.VolumeRequest.prototype.setAltura = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double largura = 6;
 * @return {number}
 */
proto.freterapido.VolumeRequest.prototype.getLargura = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.freterapido.VolumeRequest.prototype.setLargura = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double comprimento = 7;
 * @return {number}
 */
proto.freterapido.VolumeRequest.prototype.getComprimento = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.freterapido.VolumeRequest.prototype.setComprimento = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double peso = 8;
 * @return {number}
 */
proto.freterapido.VolumeRequest.prototype.getPeso = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.freterapido.VolumeRequest.prototype.setPeso = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double valor = 9;
 * @return {number}
 */
proto.freterapido.VolumeRequest.prototype.getValor = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.freterapido.VolumeRequest.prototype.setValor = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional int32 volumes_produto = 10;
 * @return {number}
 */
proto.freterapido.VolumeRequest.prototype.getVolumesProduto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.freterapido.VolumeRequest.prototype.setVolumesProduto = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool consolidar = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.freterapido.VolumeRequest.prototype.getConsolidar = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.freterapido.VolumeRequest.prototype.setConsolidar = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool sobreposto = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.freterapido.VolumeRequest.prototype.getSobreposto = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.freterapido.VolumeRequest.prototype.setSobreposto = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool tombar = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.freterapido.VolumeRequest.prototype.getTombar = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.freterapido.VolumeRequest.prototype.setTombar = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};


